var obscene=function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(t){f["default"].start();var e=t.sceneHtmlString,n=t.sceneConfig,r=u(),i=c["default"].fromEvents(f["default"],"done"),a=c["default"].zip([i,r]).filter(o),l=a.filter(s);l.onValue(function(){$("#unsupported").show(),$(".container").hide(),$(".loading").hide()});var d=a.filter(function(){return!s()});d.onValue(function(){_["default"].init(n),p["default"].init()}),d.onValue(function(){$(".container-inner").html(e),$(".loading").delay(300).fadeOut()})}function o(){return"complete"===document.readyState||"loaded"===document.readyState||"interactive"===document.readyState}function s(){return"ontouchstart"in window||"onmsgesturechange"in window}function u(){var t=document.createElement("div");return t.setAttribute("id","ob-scene-wrapper"),t.innerHTML=b["default"],document.querySelector("body").appendChild(t),c["default"].stream(function(t){var e=new MutationObserver(function(e,n){var r=document.getElementById("experience-progress");return r?(t.emit(r),void n.disconnect()):void 0});e.observe(document,{childList:!0,subtree:!0})})}var a=n(1),c=r(a),l=n(2),f=r(l),d=n(3),_=r(d),h=n(6),p=r(h),m=n(5),v=(r(m),n(7)),y=(r(v),n(10)),g=(r(y),n(16)),b=r(g);t.exports.init=function(t){var e=t||obscene_compiled;i(e)}},function(t,e,n){/*! Kefir.js v3.2.0
	 *  https://github.com/rpominov/kefir
	 */
!function(e,n){t.exports=n()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t){if(i.DEPRECATION_WARNINGS!==!1&&console&&"function"==typeof console.warn){var e="\nHere is an Error object for you containing the call stack:";console.warn(t,e,new Error)}}var i=t.exports={};i.Kefir=i;var o=i.Observable=n(1);i.Stream=n(6),i.Property=n(7),i.never=n(8),i.later=n(9),i.interval=n(11),i.sequentially=n(12),i.fromPoll=n(13),i.withInterval=n(14),i.fromCallback=n(16),i.fromNodeCallback=n(18),i.fromEvents=n(19),i.stream=n(17),i.constant=n(22),i.constantError=n(23);var s=n(24);o.prototype.toProperty=function(t){return s(this,t)};var u=n(26);o.prototype.changes=function(){return u(this)},i.fromPromise=n(27);var a=n(28);o.prototype.toPromise=function(t){return a(this,t)},i.fromESObservable=n(29);var c=n(31);o.prototype.toESObservable=c,o.prototype[n(30)("observable")]=c;var l=n(32);o.prototype.map=function(t){return l(this,t)};var f=n(33);o.prototype.filter=function(t){return f(this,t)};var d=n(34);o.prototype.take=function(t){return d(this,t)};var _=n(35);o.prototype.takeErrors=function(t){return _(this,t)};var h=n(36);o.prototype.takeWhile=function(t){return h(this,t)};var p=n(37);o.prototype.last=function(){return p(this)};var m=n(38);o.prototype.skip=function(t){return m(this,t)};var v=n(39);o.prototype.skipWhile=function(t){return v(this,t)};var y=n(40);o.prototype.skipDuplicates=function(t){return y(this,t)};var g=n(41);o.prototype.diff=function(t,e){return g(this,t,e)};var b=n(42);o.prototype.scan=function(t,e){return b(this,t,e)};var w=n(43);o.prototype.flatten=function(t){return w(this,t)};var E=n(44);o.prototype.delay=function(t){return E(this,t)};var A=n(45);o.prototype.throttle=function(t,e){return A(this,t,e)};var x=n(47);o.prototype.debounce=function(t,e){return x(this,t,e)};var S=n(48);o.prototype.mapErrors=function(t){return S(this,t)};var T=n(49);o.prototype.filterErrors=function(t){return T(this,t)};var I=n(50);o.prototype.ignoreValues=function(){return I(this)};var k=n(51);o.prototype.ignoreErrors=function(){return k(this)};var V=n(52);o.prototype.ignoreEnd=function(){return V(this)};var O=n(53);o.prototype.beforeEnd=function(t){return O(this,t)};var P=n(54);o.prototype.slidingWindow=function(t,e){return P(this,t,e)};var $=n(55);o.prototype.bufferWhile=function(t,e){return $(this,t,e)};var M=n(56);o.prototype.bufferWithCount=function(t,e){return M(this,t,e)};var C=n(57);o.prototype.bufferWithTimeOrCount=function(t,e,n){return C(this,t,e,n)};var F=n(58);o.prototype.transduce=function(t){return F(this,t)};var L=n(59);o.prototype.withHandler=function(t){return L(this,t)};var N=i.combine=n(60);o.prototype.combine=function(t,e){return N([this,t],e)};var D=i.zip=n(61);o.prototype.zip=function(t,e){return D([this,t],e)};var H=i.merge=n(62);o.prototype.merge=function(t){return H([this,t])};var R=i.concat=n(64);o.prototype.concat=function(t){return R([this,t])};var q=i.Pool=n(66);i.pool=function(){return new q},i.repeat=n(65);var B=n(67);o.prototype.flatMap=function(t){return new B(this,t).setName(this,"flatMap")},o.prototype.flatMapLatest=function(t){return new B(this,t,{concurLim:1,drop:"old"}).setName(this,"flatMapLatest")},o.prototype.flatMapFirst=function(t){return new B(this,t,{concurLim:1}).setName(this,"flatMapFirst")},o.prototype.flatMapConcat=function(t){return new B(this,t,{queueLim:-1,concurLim:1}).setName(this,"flatMapConcat")},o.prototype.flatMapConcurLimit=function(t,e){return new B(this,t,{queueLim:-1,concurLim:e}).setName(this,"flatMapConcurLimit")};var G=n(68);o.prototype.flatMapErrors=function(t){return new G(this,t).setName(this,"flatMapErrors")};var W=n(69);o.prototype.filterBy=function(t){return W(this,t)};var U=n(71);o.prototype.sampledBy=function(t,e){return U(this,t,e)};var z=n(72);o.prototype.skipUntilBy=function(t){return z(this,t)};var j=n(73);o.prototype.takeUntilBy=function(t){return j(this,t)};var K=n(74);o.prototype.bufferBy=function(t,e){return K(this,t,e)};var Y=n(75);o.prototype.bufferWhileBy=function(t,e){return Y(this,t,e)};var X=n(76);o.prototype.awaiting=function(t){return r("You are using deprecated .awaiting() method, see https://github.com/rpominov/kefir/issues/145"),X(this,t)};var Q=n(77);o.prototype.valuesToErrors=function(t){return r("You are using deprecated .valuesToErrors() method, see https://github.com/rpominov/kefir/issues/149"),Q(this,t)};var J=n(78);o.prototype.errorsToValues=function(t){return r("You are using deprecated .errorsToValues() method, see https://github.com/rpominov/kefir/issues/149"),J(this,t)};var Z=n(79);o.prototype.endOnError=function(){return r("You are using deprecated .endOnError() method, see https://github.com/rpominov/kefir/issues/150"),Z(this)}},function(t,e,n){"use strict";function r(){this._dispatcher=new d,this._active=!1,this._alive=!0,this._activating=!1,this._logHandlers=null}var i=n(2),o=i.extend,s=n(3),u=s.VALUE,a=s.ERROR,c=s.ANY,l=s.END,f=n(4),d=f.Dispatcher,_=f.callSubscriber,h=n(5),p=h.findByPred;o(r.prototype,{_name:"observable",_onActivation:function(){},_onDeactivation:function(){},_setActive:function(t){this._active!==t&&(this._active=t,t?(this._activating=!0,this._onActivation(),this._activating=!1):this._onDeactivation())},_clear:function(){this._setActive(!1),this._dispatcher.cleanup(),this._dispatcher=null,this._logHandlers=null},_emit:function(t,e){switch(t){case u:return this._emitValue(e);case a:return this._emitError(e);case l:return this._emitEnd()}},_emitValue:function(t){this._alive&&this._dispatcher.dispatch({type:u,value:t})},_emitError:function(t){this._alive&&this._dispatcher.dispatch({type:a,value:t})},_emitEnd:function(){this._alive&&(this._alive=!1,this._dispatcher.dispatch({type:l}),this._clear())},_on:function(t,e){return this._alive?(this._dispatcher.add(t,e),this._setActive(!0)):_(t,e,{type:l}),this},_off:function(t,e){if(this._alive){var n=this._dispatcher.remove(t,e);0===n&&this._setActive(!1)}return this},onValue:function(t){return this._on(u,t)},onError:function(t){return this._on(a,t)},onEnd:function(t){return this._on(l,t)},onAny:function(t){return this._on(c,t)},offValue:function(t){return this._off(u,t)},offError:function(t){return this._off(a,t)},offEnd:function(t){return this._off(l,t)},offAny:function(t){return this._off(c,t)},_ofSameType:function(t,e){return t.prototype.getType()===this.getType()?t:e},setName:function(t,e){return this._name=e?t._name+"."+e:t,this},log:function(){var t=arguments.length<=0||void 0===arguments[0]?this.toString():arguments[0],e=void 0,n=function(n){var r="<"+n.type+(e?":current":"")+">";n.type===l?console.log(t,r):console.log(t,r,n.value)};return this._alive&&(this._logHandlers||(this._logHandlers=[]),this._logHandlers.push({name:t,handler:n})),e=!0,this.onAny(n),e=!1,this},offLog:function(){var t=arguments.length<=0||void 0===arguments[0]?this.toString():arguments[0];if(this._logHandlers){var e=p(this._logHandlers,function(e){return e.name===t});-1!==e&&(this.offAny(this._logHandlers[e].handler),this._logHandlers.splice(e,1))}return this}}),r.prototype.toString=function(){return"["+this._name+"]"},t.exports=r},function(t,e){"use strict";function n(t){var e=function(){};return e.prototype=t,new e}function r(t){var e=arguments.length,n=void 0,r=void 0;for(n=1;e>n;n++)for(r in arguments[n])t[r]=arguments[n][r];return t}function i(t,e){var i=arguments.length,o=void 0;for(t.prototype=n(e.prototype),t.prototype.constructor=t,o=2;i>o;o++)r(t.prototype,arguments[o]);return t}t.exports={extend:r,inherit:i}},function(t,e){"use strict";e.NOTHING=["<nothing>"],e.END="end",e.VALUE="value",e.ERROR="error",e.ANY="any"},function(t,e,n){"use strict";function r(t,e,n){t===l?e(n):t===n.type&&(t===a||t===c?e(n.value):e())}function i(){this._items=[],this._inLoop=0,this._removedItems=null}var o=n(2),s=o.extend,u=n(3),a=u.VALUE,c=u.ERROR,l=u.ANY,f=n(5),d=f.concat,_=f.findByPred,h=f.remove,p=f.contains;s(i.prototype,{add:function(t,e){return this._items=d(this._items,[{type:t,fn:e}]),this._items.length},remove:function(t,e){var n=_(this._items,function(n){return n.type===t&&n.fn===e});return 0!==this._inLoop&&-1!==n&&(null===this._removedItems&&(this._removedItems=[]),this._removedItems.push(this._items[n])),this._items=h(this._items,n),this._items.length},dispatch:function(t){this._inLoop++;for(var e=0,n=this._items;e<n.length&&null!==this._items;e++)null!==this._removedItems&&p(this._removedItems,n[e])||r(n[e].type,n[e].fn,t);this._inLoop--,0===this._inLoop&&(this._removedItems=null)},cleanup:function(){this._items=null}}),t.exports={callSubscriber:r,Dispatcher:i}},function(t,e){"use strict";function n(t,e){var n=void 0,r=void 0,i=void 0,o=void 0;if(0===t.length)return e;if(0===e.length)return t;for(o=0,n=new Array(t.length+e.length),r=t.length,i=0;r>i;i++,o++)n[o]=t[i];for(r=e.length,i=0;r>i;i++,o++)n[o]=e[i];return n}function r(t,e){var n=t.length,r=new Array(n),i=void 0;for(i=0;n>i;i++)r[(i+e)%n]=t[i];return r}function i(t,e){var n=t.length,r=void 0;for(r=0;n>r;r++)if(t[r]===e)return r;return-1}function o(t,e){var n=t.length,r=void 0;for(r=0;n>r;r++)if(e(t[r]))return r;return-1}function s(t){var e=t.length,n=new Array(e),r=void 0;for(r=0;e>r;r++)n[r]=t[r];return n}function u(t,e){var n=t.length,r=void 0,i=void 0,o=void 0;if(e>=0&&n>e){if(1===n)return[];for(r=new Array(n-1),i=0,o=0;n>i;i++)i!==e&&(r[o]=t[i],o++);return r}return t}function a(t,e){return u(t,o(t,e))}function c(t,e){var n=t.length,r=new Array(n),i=void 0;for(i=0;n>i;i++)r[i]=e(t[i]);return r}function l(t,e){var n=t.length,r=void 0;for(r=0;n>r;r++)e(t[r])}function f(t,e){var n=t.length,r=void 0;for(r=0;n>r;r++)t[r]=e}function d(t,e){return-1!==i(t,e)}function _(t,e,n){var r=Math.min(n,t.length+1),i=t.length-r+1,o=new Array(r),s=void 0;for(s=i;r>s;s++)o[s-i]=t[s];return o[r-1]=e,o}t.exports={concat:n,circleShift:r,find:i,findByPred:o,cloneArray:s,remove:u,removeByPred:a,map:c,forEach:l,fillArray:f,contains:d,slide:_}},function(t,e,n){"use strict";function r(){s.call(this)}var i=n(2),o=i.inherit,s=n(1);o(r,s,{_name:"stream",getType:function(){return"stream"}}),t.exports=r},function(t,e,n){"use strict";function r(){d.call(this),this._currentEvent=null}var i=n(2),o=i.inherit,s=n(3),u=s.VALUE,a=s.ERROR,c=s.END,l=n(4),f=l.callSubscriber,d=n(1);o(r,d,{_name:"property",_emitValue:function(t){this._alive&&(this._currentEvent={type:u,value:t},this._activating||this._dispatcher.dispatch({type:u,value:t}))},_emitError:function(t){this._alive&&(this._currentEvent={type:a,value:t},this._activating||this._dispatcher.dispatch({type:a,value:t}))},_emitEnd:function(){this._alive&&(this._alive=!1,this._activating||this._dispatcher.dispatch({type:c}),this._clear())},_on:function(t,e){return this._alive&&(this._dispatcher.add(t,e),this._setActive(!0)),null!==this._currentEvent&&f(t,e,this._currentEvent),this._alive||f(t,e,{type:c}),this},getType:function(){return"property"}}),t.exports=r},function(t,e,n){"use strict";var r=n(6),i=new r;i._emitEnd(),i._name="never",t.exports=function(){return i}},function(t,e,n){"use strict";var r=n(10),i=r({_name:"later",_init:function(t){var e=t.x;this._x=e},_free:function(){this._x=null},_onTick:function(){this._emitValue(this._x),this._emitEnd()}});t.exports=function(t,e){return new i(t,{x:e})}},function(t,e,n){"use strict";var r=n(2),i=r.inherit,o=n(6);t.exports=function(t){function e(t,e){var n=this;o.call(this),this._wait=t,this._intervalId=null,this._$onTick=function(){return n._onTick()},this._init(e)}return i(e,o,{_init:function(){},_free:function(){},_onTick:function(){},_onActivation:function(){this._intervalId=setInterval(this._$onTick,this._wait)},_onDeactivation:function(){null!==this._intervalId&&(clearInterval(this._intervalId),this._intervalId=null)},_clear:function(){o.prototype._clear.call(this),this._$onTick=null,this._free()}},t),e}},function(t,e,n){"use strict";var r=n(10),i=r({_name:"interval",_init:function(t){var e=t.x;this._x=e},_free:function(){this._x=null},_onTick:function(){this._emitValue(this._x)}});t.exports=function(t,e){return new i(t,{x:e})}},function(t,e,n){"use strict";var r=n(10),i=n(5),o=i.cloneArray,s=n(8),u=r({_name:"sequentially",_init:function(t){var e=t.xs;this._xs=o(e)},_free:function(){this._xs=null},_onTick:function(){1===this._xs.length?(this._emitValue(this._xs[0]),this._emitEnd()):this._emitValue(this._xs.shift())}});t.exports=function(t,e){return 0===e.length?s():new u(t,{xs:e})}},function(t,e,n){"use strict";var r=n(10),i=r({_name:"fromPoll",_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_onTick:function(){var t=this._fn;this._emitValue(t())}});t.exports=function(t,e){return new i(t,{fn:e})}},function(t,e,n){"use strict";var r=n(10),i=n(15),o=r({_name:"withInterval",_init:function(t){var e=t.fn;this._fn=e,this._emitter=i(this)},_free:function(){this._fn=null,this._emitter=null},_onTick:function(){var t=this._fn;t(this._emitter)}});t.exports=function(t,e){return new o(t,{fn:e})}},function(t,e){"use strict";t.exports=function(t){function e(e){return t._emitValue(e),t._active}function n(e){return t._emitError(e),t._active}function r(){return t._emitEnd(),t._active}function i(e){return t._emit(e.type,e.value),t._active}return{value:e,error:n,end:r,event:i,emit:e,emitEvent:i}}},function(t,e,n){"use strict";var r=n(17);t.exports=function(t){var e=!1;return r(function(n){e||(t(function(t){n.emit(t),n.end()}),e=!0)}).setName("fromCallback")}},function(t,e,n){"use strict";function r(t){s.call(this),this._fn=t,this._unsubscribe=null}var i=n(2),o=i.inherit,s=n(6),u=n(15);o(r,s,{_name:"stream",_onActivation:function(){var t=this._fn,e=t(u(this));this._unsubscribe="function"==typeof e?e:null,this._active||this._callUnsubscribe()},_callUnsubscribe:function(){null!==this._unsubscribe&&(this._unsubscribe(),this._unsubscribe=null)},_onDeactivation:function(){this._callUnsubscribe()},_clear:function(){s.prototype._clear.call(this),this._fn=null}}),t.exports=function(t){return new r(t)}},function(t,e,n){"use strict";var r=n(17);t.exports=function(t){var e=!1;return r(function(n){e||(t(function(t,e){t?n.error(t):n.emit(e),n.end()}),e=!0)}).setName("fromNodeCallback")}},function(t,e,n){"use strict";var r=n(20),i=[["addEventListener","removeEventListener"],["addListener","removeListener"],["on","off"]];t.exports=function(t,e,n){for(var o=void 0,s=void 0,u=0;u<i.length;u++)if("function"==typeof t[i[u][0]]&&"function"==typeof t[i[u][1]]){o=i[u][0],s=i[u][1];break}if(void 0===o)throw new Error("target don't support any of addEventListener/removeEventListener, addListener/removeListener, on/off method pair");return r(function(n){return t[o](e,n)},function(n){return t[s](e,n)},n).setName("fromEvents")}},function(t,e,n){"use strict";var r=n(17),i=n(21),o=i.apply;t.exports=function(t,e,n){return r(function(r){var i=n?function(){r.emit(o(n,this,arguments))}:function(t){r.emit(t)};return t(i),function(){return e(i)}}).setName("fromSubUnsub")}},function(t,e){"use strict";function n(t,e){switch(e){case 0:return function(){return t()};case 1:return function(e){return t(e[0])};case 2:return function(e){return t(e[0],e[1])};case 3:return function(e){return t(e[0],e[1],e[2])};case 4:return function(e){return t(e[0],e[1],e[2],e[3])};default:return function(e){return t.apply(null,e)}}}function r(t,e,n){var r=n?n.length:0;if(null==e)switch(r){case 0:return t();case 1:return t(n[0]);case 2:return t(n[0],n[1]);case 3:return t(n[0],n[1],n[2]);case 4:return t(n[0],n[1],n[2],n[3]);default:return t.apply(null,n)}else switch(r){case 0:return t.call(e);default:return t.apply(e,n)}}t.exports={spread:n,apply:r}},function(t,e,n){"use strict";function r(t){this._currentEvent={type:"value",value:t,current:!0}}var i=n(2),o=i.inherit,s=n(7);o(r,s,{_name:"constant",_active:!1,_activating:!1,_alive:!1,_dispatcher:null,_logHandlers:null}),t.exports=function(t){return new r(t)}},function(t,e,n){"use strict";function r(t){this._currentEvent={type:"error",value:t,current:!0}}var i=n(2),o=i.inherit,s=n(7);o(r,s,{_name:"constantError",_active:!1,_activating:!1,_alive:!1,_dispatcher:null,_logHandlers:null}),t.exports=function(t){return new r(t)}},function(t,e,n){"use strict";var r=n(25),i=r.createProperty,o=i("toProperty",{_init:function(t){var e=t.fn;this._getInitialCurrent=e},_onActivation:function(){if(null!==this._getInitialCurrent){var t=this._getInitialCurrent;this._emitValue(t())}this._source.onAny(this._$handleAny)}});t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?null:arguments[1];if(null!==e&&"function"!=typeof e)throw new Error("You should call toProperty() with a function or no arguments.");return new o(t,{fn:e})}},function(t,e,n){"use strict";function r(t,e){return function(n,r){var i=this;t.call(this),this._source=n,this._name=n._name+"."+e,this._init(r),this._$handleAny=function(t){return i._handleAny(t)}}}function i(t){return{_init:function(){},_free:function(){},_handleValue:function(t){this._emitValue(t)},_handleError:function(t){this._emitError(t)},_handleEnd:function(){this._emitEnd()},_handleAny:function(t){switch(t.type){case d:return this._handleValue(t.value);case _:return this._handleError(t.value);case h:return this._handleEnd()}},_onActivation:function(){this._source.onAny(this._$handleAny)},_onDeactivation:function(){this._source.offAny(this._$handleAny)},_clear:function(){t.prototype._clear.call(this),this._source=null,this._$handleAny=null,this._free()}}}function o(t,e){var n=r(u,t);return l(n,u,i(u),e),n}function s(t,e){var n=r(a,t);return l(n,a,i(a),e),n}var u=n(6),a=n(7),c=n(2),l=c.inherit,f=n(3),d=f.VALUE,_=f.ERROR,h=f.END;t.exports={createStream:o,createProperty:s}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=i("changes",{_handleValue:function(t){this._activating||this._emitValue(t)},_handleError:function(t){this._activating||this._emitError(t)}});t.exports=function(t){return new o(t)}},function(t,e,n){"use strict";var r=n(17),i=n(24);t.exports=function(t){var e=!1,n=r(function(n){if(!e){var r=function(t){n.emit(t),n.end()},i=function(t){n.error(t),n.end()},o=t.then(r,i);o&&"function"==typeof o.done&&o.done(),e=!0}});return i(n,null).setName("fromPromise")}},function(t,e,n){"use strict";function r(){if("function"==typeof Promise)return Promise;throw new Error("There isn't default Promise, use shim or parameter")}var i=n(3),o=i.VALUE,s=i.END;t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?r():arguments[1],n=null;return new e(function(e,r){t.onAny(function(t){t.type===s&&null!==n?((n.type===o?e:r)(n.value),n=null):n=t})})}},function(t,e,n){"use strict";var r=n(17),i=n(30)("observable");t.exports=function(t){var e=t[i]?t[i]():t;return r(function(t){var n=e.subscribe({error:function(e){t.error(e),t.end()},next:function(e){t.emit(e)},complete:function(){t.end()}});return n.unsubscribe?function(){n.unsubscribe()}:n}).setName("fromESObservable")}},function(t,e){"use strict";t.exports=function(t){return"undefined"!=typeof Symbol&&Symbol[t]?Symbol[t]:"undefined"!=typeof Symbol&&"function"==typeof Symbol["for"]?Symbol["for"](t):"@@"+t}},function(t,e,n){"use strict";function r(t){this._observable=t.takeErrors(1)}var i=n(2),o=i.extend,s=n(3),u=s.VALUE,a=s.ERROR,c=s.END;o(r.prototype,{subscribe:function(t){var e=this,n=function(e){e.type===u&&t.next?t.next(e.value):e.type===a&&t.error?t.error(e.value):e.type===c&&t.complete&&t.complete(e.value)};return this._observable.onAny(n),function(){return e._observable.offAny(n)}}}),t.exports=function(){return new r(this)}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleValue:function(t){var e=this._fn;this._emitValue(e(t))}},u=i("map",s),a=o("map",s),c=function(t){return t};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleValue:function(t){var e=this._fn;e(t)&&this._emitValue(t)}},u=i("filter",s),a=o("filter",s),c=function(t){return t};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.n;this._n=e,0>=e&&this._emitEnd()},_handleValue:function(t){this._n--,this._emitValue(t),0===this._n&&this._emitEnd()}},u=i("take",s),a=o("take",s);t.exports=function(t,e){return new(t._ofSameType(u,a))(t,{n:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.n;this._n=e,0>=e&&this._emitEnd()},_handleError:function(t){this._n--,this._emitError(t),0===this._n&&this._emitEnd()}},u=i("takeErrors",s),a=o("takeErrors",s);t.exports=function(t,e){return new(t._ofSameType(u,a))(t,{n:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleValue:function(t){var e=this._fn;e(t)?this._emitValue(t):this._emitEnd()}},u=i("takeWhile",s),a=o("takeWhile",s),c=function(t){return t};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s=n(3),u=s.NOTHING,a={_init:function(){this._lastValue=u},_free:function(){this._lastValue=null},_handleValue:function(t){this._lastValue=t},_handleEnd:function(){this._lastValue!==u&&this._emitValue(this._lastValue),this._emitEnd()}},c=i("last",a),l=o("last",a);t.exports=function(t){return new(t._ofSameType(c,l))(t)}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.n;this._n=Math.max(0,e)},_handleValue:function(t){0===this._n?this._emitValue(t):this._n--}},u=i("skip",s),a=o("skip",s);t.exports=function(t,e){return new(t._ofSameType(u,a))(t,{n:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleValue:function(t){var e=this._fn;null===this._fn||e(t)||(this._fn=null),null===this._fn&&this._emitValue(t)}},u=i("skipWhile",s),a=o("skipWhile",s),c=function(t){return t};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s=n(3),u=s.NOTHING,a={_init:function(t){var e=t.fn;this._fn=e,this._prev=u},_free:function(){this._fn=null,this._prev=null},_handleValue:function(t){var e=this._fn;this._prev!==u&&e(this._prev,t)||(this._prev=t,this._emitValue(t))}},c=i("skipDuplicates",a),l=o("skipDuplicates",a),f=function(t,e){return t===e};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?f:arguments[1];return new(t._ofSameType(c,l))(t,{fn:e})}},function(t,e,n){"use strict";function r(t,e){return[t,e]}var i=n(25),o=i.createStream,s=i.createProperty,u=n(3),a=u.NOTHING,c={_init:function(t){var e=t.fn,n=t.seed;this._fn=e,this._prev=n},_free:function(){this._prev=null,this._fn=null},_handleValue:function(t){if(this._prev!==a){var e=this._fn;this._emitValue(e(this._prev,t))}this._prev=t}},l=o("diff",c),f=s("diff",c);t.exports=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?a:arguments[2];return new(t._ofSameType(l,f))(t,{fn:e||r,seed:n})}},function(t,e,n){"use strict";var r=n(25),i=r.createProperty,o=n(3),s=o.ERROR,u=o.NOTHING,a=i("scan",{_init:function(t){var e=t.fn,n=t.seed;this._fn=e,this._seed=n,n!==u&&this._emitValue(n)},_free:function(){this._fn=null,this._seed=null},_handleValue:function(t){var e=this._fn;null===this._currentEvent||this._currentEvent.type===s?this._emitValue(this._seed===u?t:e(this._seed,t)):this._emitValue(e(this._currentEvent.value,t))}});t.exports=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?u:arguments[2];return new a(t,{fn:e,seed:n})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleValue:function(t){for(var e=this._fn,n=e(t),r=0;r<n.length;r++)this._emitValue(n[r])}},s=i("flatten",o),u=function(t){return t};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?u:arguments[1];return new s(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={},u={_init:function(t){var e=this,n=t.wait;this._wait=Math.max(0,n),this._buff=[],this._$shiftBuff=function(){var t=e._buff.shift();t===s?e._emitEnd():e._emitValue(t)}},_free:function(){this._buff=null,this._$shiftBuff=null},_handleValue:function(t){this._activating?this._emitValue(t):(this._buff.push(t),setTimeout(this._$shiftBuff,this._wait))},_handleEnd:function(){this._activating?this._emitEnd():(this._buff.push(s),setTimeout(this._$shiftBuff,this._wait))}},a=i("delay",u),c=o("delay",u);t.exports=function(t,e){return new(t._ofSameType(a,c))(t,{wait:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s=n(46),u={_init:function(t){var e=this,n=t.wait,r=t.leading,i=t.trailing;this._wait=Math.max(0,n),this._leading=r,this._trailing=i,this._trailingValue=null,this._timeoutId=null,this._endLater=!1,this._lastCallTime=0,this._$trailingCall=function(){return e._trailingCall()}},_free:function(){this._trailingValue=null,this._$trailingCall=null},_handleValue:function(t){if(this._activating)this._emitValue(t);else{var e=s();0!==this._lastCallTime||this._leading||(this._lastCallTime=e);var n=this._wait-(e-this._lastCallTime);0>=n?(this._cancelTrailing(),this._lastCallTime=e,this._emitValue(t)):this._trailing&&(this._cancelTrailing(),this._trailingValue=t,this._timeoutId=setTimeout(this._$trailingCall,n))}},_handleEnd:function(){this._activating?this._emitEnd():this._timeoutId?this._endLater=!0:this._emitEnd()},_cancelTrailing:function(){null!==this._timeoutId&&(clearTimeout(this._timeoutId),this._timeoutId=null)},_trailingCall:function(){this._emitValue(this._trailingValue),this._timeoutId=null,this._trailingValue=null,this._lastCallTime=this._leading?s():0,this._endLater&&this._emitEnd()}},a=i("throttle",u),c=o("throttle",u);t.exports=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=n.leading,i=void 0===r?!0:r,o=n.trailing,s=void 0===o?!0:o;return new(t._ofSameType(a,c))(t,{wait:e,leading:i,trailing:s})}},function(t,e){"use strict";t.exports=Date.now?function(){return Date.now()}:function(){return(new Date).getTime()}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s=n(46),u={_init:function(t){var e=this,n=t.wait,r=t.immediate;this._wait=Math.max(0,n),this._immediate=r,this._lastAttempt=0,this._timeoutId=null,this._laterValue=null,this._endLater=!1,this._$later=function(){return e._later()}},_free:function(){this._laterValue=null,this._$later=null},_handleValue:function(t){this._activating?this._emitValue(t):(this._lastAttempt=s(),this._immediate&&!this._timeoutId&&this._emitValue(t),this._timeoutId||(this._timeoutId=setTimeout(this._$later,this._wait)),this._immediate||(this._laterValue=t))},_handleEnd:function(){this._activating?this._emitEnd():this._timeoutId&&!this._immediate?this._endLater=!0:this._emitEnd()},_later:function(){var t=s()-this._lastAttempt;t<this._wait&&t>=0?this._timeoutId=setTimeout(this._$later,this._wait-t):(this._timeoutId=null,this._immediate||(this._emitValue(this._laterValue),this._laterValue=null),this._endLater&&this._emitEnd())}},a=i("debounce",u),c=o("debounce",u);t.exports=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=n.immediate,i=void 0===r?!1:r;return new(t._ofSameType(a,c))(t,{wait:e,immediate:i})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleError:function(t){var e=this._fn;this._emitError(e(t))}},u=i("mapErrors",s),a=o("mapErrors",s),c=function(t){return t};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleError:function(t){var e=this._fn;e(t)&&this._emitError(t)}},u=i("filterErrors",s),a=o("filterErrors",s),c=function(t){return t};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_handleValue:function(){}},u=i("ignoreValues",s),a=o("ignoreValues",s);t.exports=function(t){return new(t._ofSameType(u,a))(t)}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_handleError:function(){}},u=i("ignoreErrors",s),a=o("ignoreErrors",s);t.exports=function(t){return new(t._ofSameType(u,a))(t)}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_handleEnd:function(){}},u=i("ignoreEnd",s),a=o("ignoreEnd",s);t.exports=function(t){return new(t._ofSameType(u,a))(t)}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleEnd:function(){var t=this._fn;this._emitValue(t()),this._emitEnd()}},u=i("beforeEnd",s),a=o("beforeEnd",s);t.exports=function(t,e){return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s=n(5),u=s.slide,a={_init:function(t){var e=t.min,n=t.max;this._max=n,this._min=e,this._buff=[]},_free:function(){this._buff=null},_handleValue:function(t){this._buff=u(this._buff,t,this._max),this._buff.length>=this._min&&this._emitValue(this._buff)}},c=i("slidingWindow",a),l=o("slidingWindow",a);t.exports=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];return new(t._ofSameType(c,l))(t,{min:n,max:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn,n=t.flushOnEnd;this._fn=e,this._flushOnEnd=n,this._buff=[]},_free:function(){this._buff=null},_flush:function(){null!==this._buff&&0!==this._buff.length&&(this._emitValue(this._buff),this._buff=[])},_handleValue:function(t){this._buff.push(t);var e=this._fn;e(t)||this._flush()},_handleEnd:function(){this._flushOnEnd&&this._flush(),this._emitEnd()}},u=i("bufferWhile",s),a=o("bufferWhile",s),c=function(t){return t};t.exports=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=n.flushOnEnd,i=void 0===r?!0:r;return new(t._ofSameType(u,a))(t,{fn:e||c,flushOnEnd:i})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.count,n=t.flushOnEnd;this._count=e,this._flushOnEnd=n,this._buff=[]},_free:function(){this._buff=null},_flush:function(){null!==this._buff&&0!==this._buff.length&&(this._emitValue(this._buff),this._buff=[])},_handleValue:function(t){this._buff.push(t),this._buff.length>=this._count&&this._flush()},_handleEnd:function(){this._flushOnEnd&&this._flush(),this._emitEnd()}},u=i("bufferWithCount",s),a=o("bufferWithCount",s);t.exports=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=n.flushOnEnd,i=void 0===r?!0:r;return new(t._ofSameType(u,a))(t,{count:e,flushOnEnd:i})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=this,n=t.wait,r=t.count,i=t.flushOnEnd;this._wait=n,this._count=r,this._flushOnEnd=i,this._intervalId=null,this._$onTick=function(){return e._flush();
},this._buff=[]},_free:function(){this._$onTick=null,this._buff=null},_flush:function(){null!==this._buff&&(this._emitValue(this._buff),this._buff=[])},_handleValue:function(t){this._buff.push(t),this._buff.length>=this._count&&(clearInterval(this._intervalId),this._flush(),this._intervalId=setInterval(this._$onTick,this._wait))},_handleEnd:function(){this._flushOnEnd&&0!==this._buff.length&&this._flush(),this._emitEnd()},_onActivation:function(){this._source.onAny(this._$handleAny),this._intervalId=setInterval(this._$onTick,this._wait)},_onDeactivation:function(){null!==this._intervalId&&(clearInterval(this._intervalId),this._intervalId=null),this._source.offAny(this._$handleAny)}},u=i("bufferWithTimeOrCount",s),a=o("bufferWithTimeOrCount",s);t.exports=function(t,e,n){var r=arguments.length<=3||void 0===arguments[3]?{}:arguments[3],i=r.flushOnEnd,o=void 0===i?!0:i;return new(t._ofSameType(u,a))(t,{wait:e,count:n,flushOnEnd:o})}},function(t,e,n){"use strict";function r(t){return{"@@transducer/step":function(e,n){return t._emitValue(n),null},"@@transducer/result":function(){return t._emitEnd(),null}}}var i=n(25),o=i.createStream,s=i.createProperty,u={_init:function(t){var e=t.transducer;this._xform=e(r(this))},_free:function(){this._xform=null},_handleValue:function(t){null!==this._xform["@@transducer/step"](null,t)&&this._xform["@@transducer/result"](null)},_handleEnd:function(){this._xform["@@transducer/result"](null)}},a=o("transduce",u),c=s("transduce",u);t.exports=function(t,e){return new(t._ofSameType(a,c))(t,{transducer:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s=n(15),u={_init:function(t){var e=t.fn;this._handler=e,this._emitter=s(this)},_free:function(){this._handler=null,this._emitter=null},_handleAny:function(t){this._handler(this._emitter,t)}},a=i("withHandler",u),c=o("withHandler",u);t.exports=function(t,e){return new(t._ofSameType(a,c))(t,{fn:e})}},function(t,e,n){"use strict";function r(t){for(var e=void 0,n=0;n<t.length;n++)void 0!==t[n]&&(void 0===e||e.index<t[n].index)&&(e=t[n]);return e.error}function i(t,e,n){var r=this;o.call(this),this._activeCount=t.length,this._sources=_(t,e),this._combinator=n?m(n,this._sources.length):function(t){return t},this._aliveCount=0,this._latestValues=new Array(this._sources.length),this._latestErrors=new Array(this._sources.length),h(this._latestValues,c),this._emitAfterActivation=!1,this._endAfterActivation=!1,this._latestErrorIndex=0,this._$handlers=[];for(var i=function(t){r._$handlers.push(function(e){return r._handleAny(t,e)})},s=0;s<this._sources.length;s++)i(s)}var o=n(6),s=n(3),u=s.VALUE,a=s.ERROR,c=s.NOTHING,l=n(2),f=l.inherit,d=n(5),_=d.concat,h=d.fillArray,p=n(21),m=p.spread,v=n(8);f(i,o,{_name:"combine",_onActivation:function(){this._aliveCount=this._activeCount;for(var t=this._activeCount;t<this._sources.length;t++)this._sources[t].onAny(this._$handlers[t]);for(var t=0;t<this._activeCount;t++)this._sources[t].onAny(this._$handlers[t]);this._emitAfterActivation&&(this._emitAfterActivation=!1,this._emitIfFull()),this._endAfterActivation&&this._emitEnd()},_onDeactivation:function(){var t=this._sources.length,e=void 0;for(e=0;t>e;e++)this._sources[e].offAny(this._$handlers[e])},_emitIfFull:function(){for(var t=!0,e=!1,n=this._latestValues.length,i=new Array(n),o=new Array(n),s=0;n>s;s++)i[s]=this._latestValues[s],o[s]=this._latestErrors[s],i[s]===c&&(t=!1),void 0!==o[s]&&(e=!0);if(t){var u=this._combinator;this._emitValue(u(i))}e&&this._emitError(r(o))},_handleAny:function(t,e){e.type===u||e.type===a?(e.type===u&&(this._latestValues[t]=e.value,this._latestErrors[t]=void 0),e.type===a&&(this._latestValues[t]=c,this._latestErrors[t]={index:this._latestErrorIndex++,error:e.value}),t<this._activeCount&&(this._activating?this._emitAfterActivation=!0:this._emitIfFull())):t<this._activeCount&&(this._aliveCount--,0===this._aliveCount&&(this._activating?this._endAfterActivation=!0:this._emitEnd()))},_clear:function(){o.prototype._clear.call(this),this._sources=null,this._latestValues=null,this._latestErrors=null,this._combinator=null,this._$handlers=null}}),t.exports=function(t,e,n){return void 0===e&&(e=[]),"function"==typeof e&&(n=e,e=[]),0===t.length?v():new i(t,e,n)}},function(t,e,n){"use strict";function r(t,e){var n=this;i.call(this),this._buffers=d(t,function(t){return v(t)?_(t):[]}),this._sources=d(t,function(t){return v(t)?m():t}),this._combinator=e?p(e,this._sources.length):function(t){return t},this._aliveCount=0,this._$handlers=[];for(var r=function(t){n._$handlers.push(function(e){return n._handleAny(t,e)})},o=0;o<this._sources.length;o++)r(o)}var i=n(6),o=n(3),s=o.VALUE,u=o.ERROR,a=o.END,c=n(2),l=c.inherit,f=n(5),d=f.map,_=f.cloneArray,h=n(21),p=h.spread,m=n(8),v=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};l(r,i,{_name:"zip",_onActivation:function(){for(;this._isFull();)this._emit();var t=this._sources.length;this._aliveCount=t;for(var e=0;t>e&&this._active;e++)this._sources[e].onAny(this._$handlers[e])},_onDeactivation:function(){for(var t=0;t<this._sources.length;t++)this._sources[t].offAny(this._$handlers[t])},_emit:function(){for(var t=new Array(this._buffers.length),e=0;e<this._buffers.length;e++)t[e]=this._buffers[e].shift();var n=this._combinator;this._emitValue(n(t))},_isFull:function(){for(var t=0;t<this._buffers.length;t++)if(0===this._buffers[t].length)return!1;return!0},_handleAny:function(t,e){e.type===s&&(this._buffers[t].push(e.value),this._isFull()&&this._emit()),e.type===u&&this._emitError(e.value),e.type===a&&(this._aliveCount--,0===this._aliveCount&&this._emitEnd())},_clear:function(){i.prototype._clear.call(this),this._sources=null,this._buffers=null,this._combinator=null,this._$handlers=null}}),t.exports=function(t,e){return 0===t.length?m():new r(t,e)}},function(t,e,n){"use strict";function r(t){s.call(this),this._addAll(t),this._initialised=!0}var i=n(2),o=i.inherit,s=n(63),u=n(8);o(r,s,{_name:"merge",_onEmpty:function(){this._initialised&&this._emitEnd()}}),t.exports=function(t){return 0===t.length?u():new r(t)}},function(t,e,n){"use strict";function r(){var t=this,e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=e.queueLim,r=void 0===n?0:n,o=e.concurLim,s=void 0===o?-1:o,u=e.drop,a=void 0===u?"new":u;i.call(this),this._queueLim=0>r?-1:r,this._concurLim=0>s?-1:s,this._drop=a,this._queue=[],this._curSources=[],this._$handleSubAny=function(e){return t._handleSubAny(e)},this._$endHandlers=[],this._currentlyAdding=null,0===this._concurLim&&this._emitEnd()}var i=n(6),o=n(3),s=o.VALUE,u=o.ERROR,a=n(2),c=a.inherit,l=n(5),f=l.concat,d=l.forEach,_=l.findByPred,h=l.find,p=l.remove,m=l.cloneArray,v=function(t){return t};c(r,i,{_name:"abstractPool",_add:function(t,e){e=e||v,-1===this._concurLim||this._curSources.length<this._concurLim?this._addToCur(e(t)):-1===this._queueLim||this._queue.length<this._queueLim?this._addToQueue(e(t)):"old"===this._drop&&(this._removeOldest(),this._add(t,e))},_addAll:function(t){var e=this;d(t,function(t){return e._add(t)})},_remove:function(t){-1===this._removeCur(t)&&this._removeQueue(t)},_addToQueue:function(t){this._queue=f(this._queue,[t])},_addToCur:function(t){if(this._active){if(!t._alive)return void(t._currentEvent&&this._emit(t._currentEvent.type,t._currentEvent.value));this._currentlyAdding=t,t.onAny(this._$handleSubAny),this._currentlyAdding=null,t._alive&&(this._curSources=f(this._curSources,[t]),this._active&&this._subToEnd(t))}else this._curSources=f(this._curSources,[t])},_subToEnd:function(t){var e=this,n=function(){return e._removeCur(t)};this._$endHandlers.push({obs:t,handler:n}),t.onEnd(n)},_subscribe:function(t){t.onAny(this._$handleSubAny),this._active&&this._subToEnd(t)},_unsubscribe:function(t){t.offAny(this._$handleSubAny);var e=_(this._$endHandlers,function(e){return e.obs===t});-1!==e&&(t.offEnd(this._$endHandlers[e].handler),this._$endHandlers.splice(e,1))},_handleSubAny:function(t){t.type===s?this._emitValue(t.value):t.type===u&&this._emitError(t.value)},_removeQueue:function(t){var e=h(this._queue,t);return this._queue=p(this._queue,e),e},_removeCur:function(t){this._active&&this._unsubscribe(t);var e=h(this._curSources,t);return this._curSources=p(this._curSources,e),-1!==e&&(0!==this._queue.length?this._pullQueue():0===this._curSources.length&&this._onEmpty()),e},_removeOldest:function(){this._removeCur(this._curSources[0])},_pullQueue:function(){0!==this._queue.length&&(this._queue=m(this._queue),this._addToCur(this._queue.shift()))},_onActivation:function(){for(var t=0,e=this._curSources;t<e.length&&this._active;t++)this._subscribe(e[t])},_onDeactivation:function(){for(var t=0,e=this._curSources;t<e.length;t++)this._unsubscribe(e[t]);null!==this._currentlyAdding&&this._unsubscribe(this._currentlyAdding)},_isEmpty:function(){return 0===this._curSources.length},_onEmpty:function(){},_clear:function(){i.prototype._clear.call(this),this._queue=null,this._curSources=null,this._$handleSubAny=null,this._$endHandlers=null}}),t.exports=r},function(t,e,n){"use strict";var r=n(65);t.exports=function(t){return r(function(e){return t.length>e?t[e]:!1}).setName("concat")}},function(t,e,n){"use strict";function r(t){var e=this;s.call(this),this._generator=t,this._source=null,this._inLoop=!1,this._iteration=0,this._$handleAny=function(t){return e._handleAny(t)}}var i=n(2),o=i.inherit,s=n(6),u=n(3),a=u.END;o(r,s,{_name:"repeat",_handleAny:function(t){t.type===a?(this._source=null,this._getSource()):this._emit(t.type,t.value)},_getSource:function(){if(!this._inLoop){this._inLoop=!0;for(var t=this._generator;null===this._source&&this._alive&&this._active;)this._source=t(this._iteration++),this._source?this._source.onAny(this._$handleAny):this._emitEnd();this._inLoop=!1}},_onActivation:function(){this._source?this._source.onAny(this._$handleAny):this._getSource()},_onDeactivation:function(){this._source&&this._source.offAny(this._$handleAny)},_clear:function(){s.prototype._clear.call(this),this._generator=null,this._source=null,this._$handleAny=null}}),t.exports=function(t){return new r(t)}},function(t,e,n){"use strict";function r(){s.call(this)}var i=n(2),o=i.inherit,s=n(63);o(r,s,{_name:"pool",plug:function(t){return this._add(t),this},unplug:function(t){return this._remove(t),this}}),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){var r=this;l.call(this,n),this._source=t,this._fn=e,this._mainEnded=!1,this._lastCurrent=null,this._$handleMain=function(t){return r._handleMain(t)}}var i=n(3),o=i.VALUE,s=i.ERROR,u=i.END,a=n(2),c=a.inherit,l=n(63);c(r,l,{_onActivation:function(){l.prototype._onActivation.call(this),this._active&&this._source.onAny(this._$handleMain)},_onDeactivation:function(){l.prototype._onDeactivation.call(this),this._source.offAny(this._$handleMain),this._hadNoEvSinceDeact=!0},_handleMain:function(t){if(t.type===o){var e=this._activating&&this._hadNoEvSinceDeact&&this._lastCurrent===t.value;e||this._add(t.value,this._fn),this._lastCurrent=t.value,this._hadNoEvSinceDeact=!1}t.type===s&&this._emitError(t.value),t.type===u&&(this._isEmpty()?this._emitEnd():this._mainEnded=!0)},_onEmpty:function(){this._mainEnded&&this._emitEnd()},_clear:function(){l.prototype._clear.call(this),this._source=null,this._lastCurrent=null,this._$handleMain=null}}),t.exports=r},function(t,e,n){"use strict";function r(t,e){l.call(this,t,e)}var i=n(3),o=i.VALUE,s=i.ERROR,u=i.END,a=n(2),c=a.inherit,l=n(67);c(r,l,{_handleMain:function(t){if(t.type===s){var e=this._activating&&this._hadNoEvSinceDeact&&this._lastCurrent===t.value;e||this._add(t.value,this._fn),this._lastCurrent=t.value,this._hadNoEvSinceDeact=!1}t.type===o&&this._emitValue(t.value),t.type===u&&(this._isEmpty()?this._emitEnd():this._mainEnded=!0)}}),t.exports=r},function(t,e,n){"use strict";var r=n(70),i=r.createStream,o=r.createProperty,s=n(3),u=s.NOTHING,a={_handlePrimaryValue:function(t){this._lastSecondary!==u&&this._lastSecondary&&this._emitValue(t)},_handleSecondaryEnd:function(){this._lastSecondary!==u&&this._lastSecondary||this._emitEnd()}},c=i("filterBy",a),l=o("filterBy",a);t.exports=function(t,e){return new(t._ofSameType(c,l))(t,e)}},function(t,e,n){"use strict";function r(t,e){return function(n,r,i){var o=this;t.call(this),this._primary=n,this._secondary=r,this._name=n._name+"."+e,this._lastSecondary=p,this._$handleSecondaryAny=function(t){return o._handleSecondaryAny(t)},this._$handlePrimaryAny=function(t){return o._handlePrimaryAny(t)},this._init(i)}}function i(t){return{_init:function(){},_free:function(){},_handlePrimaryValue:function(t){this._emitValue(t)},_handlePrimaryError:function(t){this._emitError(t)},_handlePrimaryEnd:function(){this._emitEnd()},_handleSecondaryValue:function(t){this._lastSecondary=t},_handleSecondaryError:function(t){this._emitError(t)},_handleSecondaryEnd:function(){},_handlePrimaryAny:function(t){switch(t.type){case d:return this._handlePrimaryValue(t.value);case _:return this._handlePrimaryError(t.value);case h:return this._handlePrimaryEnd(t.value)}},_handleSecondaryAny:function(t){switch(t.type){case d:return this._handleSecondaryValue(t.value);case _:return this._handleSecondaryError(t.value);case h:this._handleSecondaryEnd(t.value),this._removeSecondary()}},_removeSecondary:function(){null!==this._secondary&&(this._secondary.offAny(this._$handleSecondaryAny),this._$handleSecondaryAny=null,this._secondary=null)},_onActivation:function(){null!==this._secondary&&this._secondary.onAny(this._$handleSecondaryAny),this._active&&this._primary.onAny(this._$handlePrimaryAny)},_onDeactivation:function(){null!==this._secondary&&this._secondary.offAny(this._$handleSecondaryAny),this._primary.offAny(this._$handlePrimaryAny)},_clear:function(){t.prototype._clear.call(this),this._primary=null,this._secondary=null,this._lastSecondary=null,this._$handleSecondaryAny=null,this._$handlePrimaryAny=null,this._free()}}}function o(t,e){var n=r(u,t);return l(n,u,i(u),e),n}function s(t,e){var n=r(a,t);return l(n,a,i(a),e),n}var u=n(6),a=n(7),c=n(2),l=c.inherit,f=n(3),d=f.VALUE,_=f.ERROR,h=f.END,p=f.NOTHING;t.exports={createStream:o,createProperty:s}},function(t,e,n){"use strict";var r=n(60),i=function(t,e){return e};t.exports=function(t,e,n){var o=n?function(t,e){return n(e,t)}:i;return r([e],[t],o).setName(t,"sampledBy")}},function(t,e,n){"use strict";var r=n(70),i=r.createStream,o=r.createProperty,s=n(3),u=s.NOTHING,a={_handlePrimaryValue:function(t){this._lastSecondary!==u&&this._emitValue(t)},_handleSecondaryEnd:function(){this._lastSecondary===u&&this._emitEnd()}},c=i("skipUntilBy",a),l=o("skipUntilBy",a);t.exports=function(t,e){return new(t._ofSameType(c,l))(t,e)}},function(t,e,n){"use strict";var r=n(70),i=r.createStream,o=r.createProperty,s={_handleSecondaryValue:function(){this._emitEnd()}},u=i("takeUntilBy",s),a=o("takeUntilBy",s);t.exports=function(t,e){return new(t._ofSameType(u,a))(t,e)}},function(t,e,n){"use strict";var r=n(70),i=r.createStream,o=r.createProperty,s={_init:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.flushOnEnd,n=void 0===e?!0:e;this._buff=[],this._flushOnEnd=n},_free:function(){this._buff=null},_flush:function(){null!==this._buff&&(this._emitValue(this._buff),this._buff=[])},_handlePrimaryEnd:function(){this._flushOnEnd&&this._flush(),this._emitEnd()},_onActivation:function(){this._primary.onAny(this._$handlePrimaryAny),this._alive&&null!==this._secondary&&this._secondary.onAny(this._$handleSecondaryAny)},_handlePrimaryValue:function(t){this._buff.push(t)},_handleSecondaryValue:function(){this._flush()},_handleSecondaryEnd:function(){this._flushOnEnd||this._emitEnd()}},u=i("bufferBy",s),a=o("bufferBy",s);t.exports=function(t,e,n){return new(t._ofSameType(u,a))(t,e,n)}},function(t,e,n){"use strict";var r=n(70),i=r.createStream,o=r.createProperty,s=n(3),u=s.NOTHING,a={_init:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.flushOnEnd,n=void 0===e?!0:e,r=t.flushOnChange,i=void 0===r?!1:r;this._buff=[],this._flushOnEnd=n,this._flushOnChange=i},_free:function(){this._buff=null},_flush:function(){null!==this._buff&&(this._emitValue(this._buff),this._buff=[])},_handlePrimaryEnd:function(){this._flushOnEnd&&this._flush(),this._emitEnd()},_handlePrimaryValue:function(t){this._buff.push(t),this._lastSecondary===u||this._lastSecondary||this._flush()},_handleSecondaryEnd:function(){this._flushOnEnd||this._lastSecondary!==u&&!this._lastSecondary||this._emitEnd()},_handleSecondaryValue:function(t){this._flushOnChange&&!t&&this._flush(),this._lastSecondary=t}},c=i("bufferWhileBy",a),l=o("bufferWhileBy",a);t.exports=function(t,e,n){return new(t._ofSameType(c,l))(t,e,n)}},function(t,e,n){"use strict";var r=n(62),i=n(32),o=n(40),s=n(24),u=function(){return!1},a=function(){return!0};t.exports=function(t,e){var n=r([i(t,a),i(e,u)]);return n=o(n),n=s(n,u),n.setName(t,"awaiting")}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleValue:function(t){var e=this._fn,n=e(t);n.convert?this._emitError(n.error):this._emitValue(t)}},u=i("valuesToErrors",s),a=o("valuesToErrors",s),c=function(t){return{convert:!0,error:t}};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_init:function(t){var e=t.fn;this._fn=e},_free:function(){this._fn=null},_handleError:function(t){var e=this._fn,n=e(t);n.convert?this._emitValue(n.value):this._emitError(t)}},u=i("errorsToValues",s),a=o("errorsToValues",s),c=function(t){return{convert:!0,value:t}};t.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?c:arguments[1];return new(t._ofSameType(u,a))(t,{fn:e})}},function(t,e,n){"use strict";var r=n(25),i=r.createStream,o=r.createProperty,s={_handleError:function(t){this._emitError(t),this._emitEnd()}},u=i("endOnError",s),a=o("endOnError",s);t.exports=function(t){return new(t._ofSameType(u,a))(t)}}])})},function(t,e,n){var r,i;(function(){var o,s,u,a,c,l,f,d,_,h,p,m,v,y,g,b,w,E,A,x,S,T,I,k,V,O,P,$,M,C,F,L,N,D,H,R,q,B,G,W,U,z,j,K,Y,X,Q,J,Z,tt=[].slice,et={}.hasOwnProperty,nt=function(t,e){function n(){this.constructor=t}for(var r in e)et.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},rt=[].indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(e in this&&this[e]===t)return e;return-1};for(S={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:"body",elements:{checkInterval:100,selectors:["body"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:["GET"],trackWebSockets:!0,ignoreURLs:[]}},M=function(){var t;return null!=(t="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance.now():void 0)?t:+new Date},F=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,x=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==F&&(F=function(t){return setTimeout(t,50)},x=function(t){return clearTimeout(t)}),N=function(t){var e,n;return e=M(),(n=function(){var r;return r=M()-e,r>=33?(e=M(),t(r,function(){return F(n)})):setTimeout(n,33-r)})()},L=function(){var t,e,n;return n=arguments[0],e=arguments[1],t=3<=arguments.length?tt.call(arguments,2):[],"function"==typeof n[e]?n[e].apply(n,t):n[e]},T=function(){var t,e,n,r,i,o,s;for(e=arguments[0],r=2<=arguments.length?tt.call(arguments,1):[],o=0,s=r.length;s>o;o++)if(n=r[o])for(t in n)et.call(n,t)&&(i=n[t],null!=e[t]&&"object"==typeof e[t]&&null!=i&&"object"==typeof i?T(e[t],i):e[t]=i);return e},w=function(t){var e,n,r,i,o;for(n=e=0,i=0,o=t.length;o>i;i++)r=t[i],n+=Math.abs(r),e++;return n/e},k=function(t,e){var n,r,i;if(null==t&&(t="options"),null==e&&(e=!0),i=document.querySelector("[data-pace-"+t+"]")){if(n=i.getAttribute("data-pace-"+t),!e)return n;try{return JSON.parse(n)}catch(o){return r=o,"undefined"!=typeof console&&null!==console?console.error("Error parsing inline pace options",r):void 0}}},f=function(){function t(){}return t.prototype.on=function(t,e,n,r){var i;return null==r&&(r=!1),null==this.bindings&&(this.bindings={}),null==(i=this.bindings)[t]&&(i[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:r})},t.prototype.once=function(t,e,n){return this.on(t,e,n,!0)},t.prototype.off=function(t,e){var n,r,i;if(null!=(null!=(r=this.bindings)?r[t]:void 0)){if(null==e)return delete this.bindings[t];for(n=0,i=[];n<this.bindings[t].length;)this.bindings[t][n].handler===e?i.push(this.bindings[t].splice(n,1)):i.push(n++);return i}},t.prototype.trigger=function(){var t,e,n,r,i,o,s,u,a;if(n=arguments[0],t=2<=arguments.length?tt.call(arguments,1):[],null!=(s=this.bindings)?s[n]:void 0){for(i=0,a=[];i<this.bindings[n].length;)u=this.bindings[n][i],r=u.handler,e=u.ctx,o=u.once,r.apply(null!=e?e:this,t),o?a.push(this.bindings[n].splice(i,1)):a.push(i++);return a}},t}(),h=window.Pace||{},window.Pace=h,T(h,f.prototype),C=h.options=T({},S,window.paceOptions,k()),Q=["ajax","document","eventLag","elements"],j=0,Y=Q.length;Y>j;j++)q=Q[j],C[q]===!0&&(C[q]=S[q]);_=function(t){function e(){return J=e.__super__.constructor.apply(this,arguments)}return nt(e,t),e}(Error),s=function(){function t(){this.progress=0}return t.prototype.getElement=function(){var t;if(null==this.el){if(t=document.querySelector(C.target),!t)throw new _;this.el=document.createElement("div"),this.el.className="pace pace-active",document.body.className=document.body.className.replace(/pace-done/g,""),document.body.className+=" pace-running",this.el.innerHTML='<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>',null!=t.firstChild?t.insertBefore(this.el,t.firstChild):t.appendChild(this.el)}return this.el},t.prototype.finish=function(){var t;return t=this.getElement(),t.className=t.className.replace("pace-active",""),t.className+=" pace-inactive",document.body.className=document.body.className.replace("pace-running",""),document.body.className+=" pace-done"},t.prototype.update=function(t){return this.progress=t,this.render()},t.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(t){_=t}return this.el=void 0},t.prototype.render=function(){var t,e,n,r,i,o,s;if(null==document.querySelector(C.target))return!1;for(t=this.getElement(),r="translate3d("+this.progress+"%, 0, 0)",s=["webkitTransform","msTransform","transform"],i=0,o=s.length;o>i;i++)e=s[i],t.children[0].style[e]=r;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(t.children[0].setAttribute("data-progress-text",""+(0|this.progress)+"%"),this.progress>=100?n="99":(n=this.progress<10?"0":"",n+=0|this.progress),t.children[0].setAttribute("data-progress",""+n)),this.lastRenderedProgress=this.progress},t.prototype.done=function(){return this.progress>=100},t}(),d=function(){function t(){this.bindings={}}return t.prototype.trigger=function(t,e){var n,r,i,o,s;if(null!=this.bindings[t]){for(o=this.bindings[t],s=[],r=0,i=o.length;i>r;r++)n=o[r],s.push(n.call(this,e));return s}},t.prototype.on=function(t,e){var n;return null==(n=this.bindings)[t]&&(n[t]=[]),this.bindings[t].push(e)},t}(),z=window.XMLHttpRequest,U=window.XDomainRequest,W=window.WebSocket,I=function(t,e){var n,r,i;i=[];for(r in e.prototype)try{null==t[r]&&"function"!=typeof e[r]?"function"==typeof Object.defineProperty?i.push(Object.defineProperty(t,r,{get:function(){return e.prototype[r]},configurable:!0,enumerable:!0})):i.push(t[r]=e.prototype[r]):i.push(void 0)}catch(o){n=o}return i},P=[],h.ignore=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?tt.call(arguments,1):[],P.unshift("ignore"),n=e.apply(null,t),P.shift(),n},h.track=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?tt.call(arguments,1):[],P.unshift("track"),n=e.apply(null,t),P.shift(),n},R=function(t){var e;if(null==t&&(t="GET"),"track"===P[0])return"force";if(!P.length&&C.ajax){if("socket"===t&&C.ajax.trackWebSockets)return!0;if(e=t.toUpperCase(),rt.call(C.ajax.trackMethods,e)>=0)return!0}return!1},p=function(t){function e(){var t,n=this;e.__super__.constructor.apply(this,arguments),t=function(t){var e;return e=t.open,t.open=function(r,i,o){return R(r)&&n.trigger("request",{type:r,url:i,request:t}),e.apply(t,arguments)}},window.XMLHttpRequest=function(e){var n;return n=new z(e),t(n),n};try{I(window.XMLHttpRequest,z)}catch(r){}if(null!=U){window.XDomainRequest=function(){var e;return e=new U,t(e),e};try{I(window.XDomainRequest,U)}catch(r){}}if(null!=W&&C.ajax.trackWebSockets){window.WebSocket=function(t,e){var r;return r=null!=e?new W(t,e):new W(t),R("socket")&&n.trigger("request",{type:"socket",url:t,protocols:e,request:r}),r};try{I(window.WebSocket,W)}catch(r){}}}return nt(e,t),e}(d),K=null,V=function(){return null==K&&(K=new p),K},H=function(t){var e,n,r,i;for(i=C.ajax.ignoreURLs,n=0,r=i.length;r>n;n++)if(e=i[n],"string"==typeof e){if(-1!==t.indexOf(e))return!0}else if(e.test(t))return!0;return!1},V().on("request",function(t){var e,n,r,i,s;return i=t.type,r=t.request,s=t.url,H(s)?void 0:h.running||C.restartOnRequestAfter===!1&&"force"!==R(i)?void 0:(n=arguments,e=C.restartOnRequestAfter||0,"boolean"==typeof e&&(e=0),setTimeout(function(){var t,e,s,u,a,c;if(t="socket"===i?r.readyState<2:0<(u=r.readyState)&&4>u){for(h.restart(),a=h.sources,c=[],e=0,s=a.length;s>e;e++){if(q=a[e],q instanceof o){q.watch.apply(q,n);break}c.push(void 0)}return c}},e))}),o=function(){function t(){var t=this;this.elements=[],V().on("request",function(){return t.watch.apply(t,arguments)})}return t.prototype.watch=function(t){var e,n,r,i;return r=t.type,e=t.request,i=t.url,H(i)?void 0:(n="socket"===r?new y(e):new g(e),this.elements.push(n))},t}(),g=function(){function t(t){var e,n,r,i,o,s,u=this;if(this.progress=0,null!=window.ProgressEvent)for(n=null,t.addEventListener("progress",function(t){return t.lengthComputable?u.progress=100*t.loaded/t.total:u.progress=u.progress+(100-u.progress)/2},!1),s=["load","abort","timeout","error"],r=0,i=s.length;i>r;r++)e=s[r],t.addEventListener(e,function(){return u.progress=100},!1);else o=t.onreadystatechange,t.onreadystatechange=function(){var e;return 0===(e=t.readyState)||4===e?u.progress=100:3===t.readyState&&(u.progress=50),"function"==typeof o?o.apply(null,arguments):void 0}}return t}(),y=function(){function t(t){var e,n,r,i,o=this;for(this.progress=0,i=["error","open"],n=0,r=i.length;r>n;n++)e=i[n],t.addEventListener(e,function(){return o.progress=100},!1)}return t}(),a=function(){function t(t){var e,n,r,i;for(null==t&&(t={}),this.elements=[],null==t.selectors&&(t.selectors=[]),i=t.selectors,n=0,r=i.length;r>n;n++)e=i[n],this.elements.push(new c(e))}return t}(),c=function(){function t(t){this.selector=t,this.progress=0,this.check()}return t.prototype.check=function(){var t=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return t.check()},C.elements.checkInterval)},t.prototype.done=function(){return this.progress=100},t}(),u=function(){function t(){var t,e,n=this;this.progress=null!=(e=this.states[document.readyState])?e:100,t=document.onreadystatechange,document.onreadystatechange=function(){return null!=n.states[document.readyState]&&(n.progress=n.states[document.readyState]),"function"==typeof t?t.apply(null,arguments):void 0}}return t.prototype.states={loading:0,interactive:50,complete:100},t}(),l=function(){function t(){var t,e,n,r,i,o=this;this.progress=0,t=0,i=[],r=0,n=M(),e=setInterval(function(){var s;return s=M()-n-50,n=M(),i.push(s),i.length>C.eventLag.sampleCount&&i.shift(),t=w(i),++r>=C.eventLag.minSamples&&t<C.eventLag.lagThreshold?(o.progress=100,clearInterval(e)):o.progress=100*(3/(t+3))},50)}return t}(),v=function(){function t(t){this.source=t,this.last=this.sinceLastUpdate=0,this.rate=C.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=L(this.source,"progress"))}return t.prototype.tick=function(t,e){var n;return null==e&&(e=L(this.source,"progress")),e>=100&&(this.done=!0),e===this.last?this.sinceLastUpdate+=t:(this.sinceLastUpdate&&(this.rate=(e-this.last)/this.sinceLastUpdate),this.catchup=(e-this.progress)/C.catchupTime,this.sinceLastUpdate=0,this.last=e),e>this.progress&&(this.progress+=this.catchup*t),n=1-Math.pow(this.progress/100,C.easeFactor),this.progress+=n*this.rate*t,this.progress=Math.min(this.lastProgress+C.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},t}(),B=null,D=null,E=null,G=null,b=null,A=null,h.running=!1,O=function(){return C.restartOnPushState?h.restart():void 0},null!=window.history.pushState&&(X=window.history.pushState,window.history.pushState=function(){return O(),X.apply(window.history,arguments)}),null!=window.history.replaceState&&(Z=window.history.replaceState,window.history.replaceState=function(){return O(),Z.apply(window.history,arguments)}),m={ajax:o,elements:a,document:u,eventLag:l},($=function(){var t,e,n,r,i,o,u,a;for(h.sources=B=[],o=["ajax","elements","document","eventLag"],e=0,r=o.length;r>e;e++)t=o[e],C[t]!==!1&&B.push(new m[t](C[t]));for(a=null!=(u=C.extraSources)?u:[],n=0,i=a.length;i>n;n++)q=a[n],B.push(new q(C));return h.bar=E=new s,D=[],G=new v})(),h.stop=function(){return h.trigger("stop"),h.running=!1,E.destroy(),A=!0,null!=b&&("function"==typeof x&&x(b),b=null),$()},h.restart=function(){return h.trigger("restart"),h.stop(),h.start()},h.go=function(){var t;return h.running=!0,E.render(),t=M(),A=!1,b=N(function(e,n){var r,i,o,s,u,a,c,l,f,d,_,p,m,y,g,b;for(l=100-E.progress,i=_=0,o=!0,a=p=0,y=B.length;y>p;a=++p)for(q=B[a],d=null!=D[a]?D[a]:D[a]=[],u=null!=(b=q.elements)?b:[q],c=m=0,g=u.length;g>m;c=++m)s=u[c],f=null!=d[c]?d[c]:d[c]=new v(s),o&=f.done,f.done||(i++,_+=f.tick(e));return r=_/i,E.update(G.tick(e,r)),E.done()||o||A?(E.update(100),h.trigger("done"),setTimeout(function(){return E.finish(),h.running=!1,h.trigger("hide")},Math.max(C.ghostTime,Math.max(C.minTime-(M()-t),0)))):n()})},h.start=function(t){T(C,t),h.running=!0;try{E.render()}catch(e){_=e}return document.querySelector(".pace")?(h.trigger("start"),h.go()):setTimeout(h.start,50)},r=[n(2)],i=function(){return h}.apply(e,r),!(void 0!==i&&(t.exports=i))}).call(this)},function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t){var e=t;return e.scrollTop=Math.floor(v.$window.scrollTop()),e.windowHeight=v.$window.height(),e.windowWidth=v.$window.width(),e}function o(t){var e=t;return e.keyframes=(0,m.convertAllPropsToPx)(e.keyframes,e.windowWidth,e.windowHeight),e}function s(t){var e=t,n=(0,m.buildPage)(t.keyframes,t.wrappers);return e.bodyHeight=n.bodyHeight,e.wrappers=n.wrappers,e.frameFocus=n.frameFocus.map(function(t){return Math.floor(t)}).reduce(function(t,e){return t.indexOf(e)<0&&t.push(e),t},[]),t}function u(t){var e=t;return e.currentWrapper=e.wrappers[0],e}function a(t){var e=t;return e.scrollTop=Math.floor(v.$window.scrollTop()),e.relativeScrollTop=e.scrollTop-e.prevKeyframesDurations,e}function c(t){var e=t;return e.scrollTop>e.keyframes[e.currentKeyframe].duration+e.prevKeyframesDurations?(e.prevKeyframesDurations+=e.keyframes[e.currentKeyframe].duration,e.currentKeyframe++):e.scrollTop<e.prevKeyframesDurations&&(e.currentKeyframe--,e.prevKeyframesDurations-=e.keyframes[e.currentKeyframe].duration),e}function l(t){function e(t,e){var n=Math.min.apply(Math,[t,e]),r=Math.max.apply(Math,[t,e]);return this>n&&r>this}for(var n=t,r=1;r<=n.frameFocus.length;r++)n.frameFocus[r]===n.scrollTop&&(n.currentFrame=[r]),e.call(n.scroll,n.frameFocus[r-1],n.frameFocus[r])&&(n.currentFrame=[r-1,r]);
return n}function f(t){switch(t.currentFrame.length){case 1:return t.frameFocus[t.currentFrame[0]+1];case 2:return t.frameFocus[t.currentFrame[1]];default:return!1}}function d(t){switch(t.currentFrame.length){case 1:return t.frameFocus[t.currentFrame[0]-1];case 2:return t.frameFocus[t.currentFrame[0]];default:return!1}}function _(t){v.$body.animate({scrollTop:t},1500,"linear")}var h=n(1),p=r(h),m=n(4),v=n(5),y=p.pool(),g=p.stream(function(t){t.emit(v.INIT_STATE)});t.exports.init=function(t){var e=p.stream(function(e){e.emit(t)}),n=e.flatMap(function(t){return g.map(function(e){var n=e;return n.keyframes=t,n})}).map(function(t){var e=t;return e.currentWrapper=e.wrappers[0],e.scrollTop=0,e});y.plug(n)};var b=y.flatMap(function(t){return p.fromEvents(v.$window,"resize",function(){return t})}).throttle(v.ANIMATION_TIME),w=p.merge([y,b]).map(i).map(o).map(s).map(u);t.exports.dimensionsCalculated$=w;var E=p.fromEvents(v.$window,"scroll").throttle(v.ANIMATION_TIME),A=p.fromEvents(window,"POSITION_CHANGED"),x=w.flatMap(function(t){return p.merge([E,A]).map(function(e){var n=t;return n.changed=e,n})}),S=p.merge([w,x]),T=p.merge([w,S]).map(a).map(c).map(l).map(function(t){var e=t;return e.currentWrapper=e.keyframes[e.currentKeyframe].wrapper,e}),I=T.map(function(t){return t.currentWrapper}).diff(null,"").filter(function(t){return t[0]!==t[1]});t.exports.wrapperChanged$=I;var k=T.diff(null,{wrappers:[],currentWrapper:void 0,scrollTop:0,relativeScrollTop:0,keyframes:void 0,prevKeyframesDurations:0,currentKeyframe:0,frameFocus:[],currentFocus:0,currentInterval:0,scrollTimeoutID:0,bodyHeight:0,windowHeight:0,windowWidth:0});t.exports.scrollTopChanged$=k,t.exports.action=function(t){switch(t){case"next":v.$window.trigger("FOCUS_NEXT");break;case"previous":v.$window.trigger("FOCUS_PREVIOUS")}};var V=k.flatMapFirst(function(t){return p.fromEvents(v.$window,"FOCUS_NEXT",function(){return t})}).map(function(t){return t[1]}).map(f),O=k.flatMapFirst(function(t){return p.fromEvents(v.$window,"FOCUS_PREVIOUS",function(){return t})}).map(function(t){return t[1]}).map(d),P=p.merge([O,V]).onValue(_);P.log()},function(t,e){"use strict";function n(t,e,n,r){return"string"==typeof t&&t.match(/%/g)&&("y"===e&&(t=parseFloat(t)/100*r),"x"===e&&(t=parseFloat(t)/100*n)),"string"==typeof t&&t.match(/v/g)&&("y"===e&&(t=parseFloat(t)/100*r),"x"===e&&(t=parseFloat(t)/100*n)),t}function r(t){switch(t){case"translateX":return 0;case"translateY":return 0;case"scale":return 1;case"rotate":return 0;case"opacity":return 1;default:return null}}t.exports.convertAllPropsToPx=function(t,e,r){var i,o,s;for(i=0;i<t.length;i++)for(t[i].duration=n(t[i].duration,"y",e,r),o=0;o<t[i].animations.length;o++)Object.keys(t[i].animations[o]).forEach(function(u){var a=t[i].animations[o][u];if("selector"!==u){if(a instanceof Array)for(s=0;s<a.length;s++)"string"==typeof a[s]&&("translateY"===u?a[s]=n(a[s],"y",e,r):a[s]=n(a[s],"x",e,r));else"string"==typeof a&&(a="translateY"===u?n(a,"y",e,r):n(a,"x",e,r));t[i].animations[o][u]=a}});return t},t.exports.buildPage=function(t,e){var n,i,o=[],s=0;for(n=0;n<t.length;n++)for(t[n].focus&&s!==o[o.length-1]&&o.push(s),s+=t[n].duration,-1==$.inArray(t[n].wrapper,e)&&e.push(t[n].wrapper),i=0;i<t[n].animations.length;i++)Object.keys(t[n].animations[i]).forEach(function(e){var o=t[n].animations[i][e];if("selector"!==e&&o instanceof Array==!1){var s=[];s.push(r(e),o),o=s}t[n].animations[i][e]=o});return{frameFocus:o,bodyHeight:s,wrappers:e}},t.exports.getDefaultPropertyValue=r},function(t,e){"use strict";var n=["translateX","translateY","opacity","rotate","scale"],r=41,i=$(window),o=$("body,html"),s={wrappers:[],currentWrapper:null,scrollTop:i.scrollTop(),relativeScrollTop:0,keyframes:void 0,prevKeyframesDurations:0,currentKeyframe:0,frameFocus:[],currentFocus:0,currentFrame:[0],scrollTimeoutID:0,bodyHeight:0,windowHeight:0,windowWidth:0};t.exports.INIT_STATE=s,t.exports.PROPERTIES=n,t.exports.ANIMATION_TIME=r,t.exports.$body=o,t.exports.$window=i},function(t,e,n){"use strict";var r=n(1),i=n(3);t.exports.init=function(){function t(){console.log("PLAY"),n=setInterval(function(){i.action("next")},5e3),$("#togglePlay").removeClass("fa-play").addClass("fa-pause"),o=!0}function e(){console.log("PAUSE"),clearInterval(n),o=!1,$("#togglePlay").removeClass("fa-pause").addClass("fa-play")}var n,o=!1,s=($("body").height(),r.fromEvents(document,"keyup",function(t){return t.preventDefault(),t})),u=s.filter(function(t){return 38===t.keyCode}),a=s.filter(function(t){return 40===t.keyCode}),c=r.fromEvents($("#toggleUp"),"click"),l=r.fromEvents($("#toggleDown"),"click");r.merge([a,l]).onValue(function(t){i.action("next")}),r.merge([u,c]).onValue(function(t){i.action("previous")}),$("#togglePlay").on("click",function(n){console.log("CLICK"),o?e():t()}),s.filter(function(t){return 80===t.keyCode||32===t.keyCode}).onValue(function(n){o?e():t()})}},function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t){t.frameFocus.map(function(e){return 100*(e/t.bodyHeight).toFixed(2)}).map(function(t){return t+"vh"}).map(function(t){$("#experience-progress").append('<div class="center-marker" style="top:'+t+'"></div>')})}function o(t){$("video",t[0]).animate({volume:0},300,"swing",function(){$(this).get(0).pause()});var e=$("video",t[1]);e[0]?(e[0].play(),e.animate({volume:e.attr("max-volume")||1},300,"swing"),m.start(e)):m.stop(e)}function s(t){p.next(t[1].substr(1))}function u(t){var e=100*(t.scrollTop/t.bodyHeight).toFixed(2);$("#experience-progress .progress").css({transform:"translateY("+e+"%)"})}function a(t){for(var e,n,r,i,o,s,u=0;u<t.keyframes[t.currentKeyframe].animations.length;u++)e=t.keyframes[t.currentKeyframe].animations[u],n=c(e,"translateY",t),r=c(e,"translateX",t),i=c(e,"scale",t),o=c(e,"rotate",t),s=c(e,"opacity",t),$(e.selector,t.currentWrapper).css({transform:"translate3d("+r+"px, "+n+"px, 0) scale("+i+") rotate("+o+"deg)",opacity:s.toFixed(2)})}function c(t,e,n){var r=t[e];return r=r?l(n.relativeScrollTop,r[0],r[1]-r[0],n.keyframes[n.currentKeyframe].duration):_.getDefaultPropertyValue(e)}function l(t,e,n,r){return-n/2*(Math.cos(Math.PI*t/r)-1)+e}var f=n(3),d=n(4),_=r(d),h=n(5),p=(n(8),n(9),n(10)),m=n(14);n(15);f.scrollTopChanged$.take(1).delay(500).onValue(function(){h.$window.trigger("resize")}),f.dimensionsCalculated$.onValue(function(t){h.$body.height(t.bodyHeight),i(t)}),f.wrapperChanged$.onValue(function(t){window.requestAnimationFrame(function(){$(t[0]).hide(),$(t[1]).show(),window.location.hash=t[1],ga("send","scene_accessed",t[1]),o(t),s(t)})}),f.scrollTopChanged$.onValue(function(t){window.requestAnimationFrame(function(){var e=(t[0],t[1]);a(e),u(e)})})},function(t,e){"use strict"},function(t,e){"use strict";$(window),$("body,html"),$("#experience-progress .progress"),$("#experience-progress")},function(t,e,n){"use strict";function r(t){i.next(t)}var i=n(11);t.exports.next=r,t.exports.config=function(t){i.config(t)},t.exports.play=function(){i.play()}},function(t,e,n){"use strict";function r(){var t=i.sound1.duration()>5?.01:.015,e=1-t,n=1e3*i.sound1.duration()*(1-t),o=i.vol;i.sound1.play(),i.sound1.fade(0,o,n*t),setTimeout(function(){i.sound1.fade(o,0,n*t)},n*e),setTimeout(function(){i.sound2.play(),i.sound2.fade(0,o,n*t)},n*e),setTimeout(function(){i.sound2.fade(o,0,n*t),r()},2*n*e)}var i,o=n(12).Howl,s={};t.exports.config=function(t){s=t.map(function(t){var e={src:["media/"+t.audio.src+".mp3"],html5:!0,volume:0};return{id:t.id,vol:t.audio.max,sound1:new o(e),sound2:new o(e)}}).reduce(function(t,e){return t[e.id]=e,t},{})},t.exports.next=function(t){i=s[t]},t.exports.pause=function(t){},t.exports.play=function(t){r()},t.exports.stop=function(t){},t.exports.loop=r},function(t,e,n){var r,i;(function(o){/*! howler.js v2.0.0-beta7 | (c) 2013-2016, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
!function(){"use strict";function s(){try{"undefined"!=typeof AudioContext?u=new AudioContext:"undefined"!=typeof webkitAudioContext?u=new webkitAudioContext:a=!1}catch(t){a=!1}if(!a)if("undefined"!=typeof Audio)try{var e=new Audio;"undefined"==typeof e.oncanplaythrough&&(f="canplay")}catch(t){c=!0}else c=!0;try{var e=new Audio;e.muted&&(c=!0)}catch(t){}var n=/iP(hone|od|ad)/.test(navigator.platform),r=navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),i=r?parseInt(r[1],10):null;if(n&&i&&9>i){var o=/safari/.test(window.navigator.userAgent.toLowerCase());(window.navigator.standalone&&!o||!window.navigator.standalone&&!o)&&(a=!1)}a&&(l="undefined"==typeof u.createGain?u.createGainNode():u.createGain(),l.gain.value=1,l.connect(u.destination))}var u=null,a=!0,c=!1,l=null,f="canplaythrough";s();var d=function(){this.init()};d.prototype={init:function(){var t=this||_;return t._codecs={},t._howls=[],t._muted=!1,t._volume=1,t.state=u?u.state||"running":"running",t.autoSuspend=!0,t._autoSuspend(),t.mobileAutoEnable=!0,t.noAudio=c,t.usingWebAudio=a,t.ctx=u,c||t._setupCodecs(),t},volume:function(t){var e=this||_;if(t=parseFloat(t),"undefined"!=typeof t&&t>=0&&1>=t){e._volume=t,a&&(l.gain.value=t);for(var n=0;n<e._howls.length;n++)if(!e._howls[n]._webAudio)for(var r=e._howls[n]._getSoundIds(),i=0;i<r.length;i++){var o=e._howls[n]._soundById(r[i]);o&&o._node&&(o._node.volume=o._volume*t)}return e}return e._volume},mute:function(t){var e=this||_;e._muted=t,a&&(l.gain.value=t?0:e._volume);for(var n=0;n<e._howls.length;n++)if(!e._howls[n]._webAudio)for(var r=e._howls[n]._getSoundIds(),i=0;i<r.length;i++){var o=e._howls[n]._soundById(r[i]);o&&o._node&&(o._node.muted=t?!0:o._muted)}return e},unload:function(){for(var t=this||_,e=t._howls.length-1;e>=0;e--)t._howls[e].unload();return t.usingWebAudio&&"undefined"!=typeof u.close&&(t.ctx=null,u.close(),s(),t.ctx=u),t},codecs:function(t){return(this||_)._codecs[t]},_setupCodecs:function(){var t=this||_,e=new Audio,n=e.canPlayType("audio/mpeg;").replace(/^no$/,""),r=/OPR\//.test(navigator.userAgent);return t._codecs={mp3:!(r||!n&&!e.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!n,opus:!!e.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!e.canPlayType("audio/aac;").replace(/^no$/,""),m4a:!!(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(e.canPlayType("audio/x-mp4;")||e.canPlayType("audio/mp4;")||e.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!e.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!e.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!e.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,"")},t},_enableMobileAudio:function(){var t=this||_,e=/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk/i.test(navigator.userAgent),n=!!("ontouchend"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0);if(!u||!t._mobileEnabled&&e&&n){t._mobileEnabled=!1;var r=function(){var e=u.createBuffer(1,1,22050),n=u.createBufferSource();n.buffer=e,n.connect(u.destination),"undefined"==typeof n.start?n.noteOn(0):n.start(0),n.onended=function(){n.disconnect(0),t._mobileEnabled=!0,t.mobileAutoEnable=!1,document.removeEventListener("touchend",r,!0)}};return document.addEventListener("touchend",r,!0),t}},_autoSuspend:function(){var t=this;if(t.autoSuspend&&u&&"undefined"!=typeof u.suspend&&a){for(var e=0;e<t._howls.length;e++)if(t._howls[e]._webAudio)for(var n=0;n<t._howls[e]._sounds.length;n++)if(!t._howls[e]._sounds[n]._paused)return t;return t._suspendTimer=setTimeout(function(){t.autoSuspend&&(t._suspendTimer=null,t.state="suspending",u.suspend().then(function(){t.state="suspended",t._resumeAfterSuspend&&(delete t._resumeAfterSuspend,t._autoResume())}))},3e4),t}},_autoResume:function(){var t=this;return u&&"undefined"!=typeof u.resume&&a?("running"===t.state&&t._suspendTimer?(clearTimeout(t._suspendTimer),t._suspendTimer=null):"suspended"===t.state?(t.state="resuming",u.resume().then(function(){t.state="running"}),t._suspendTimer&&(clearTimeout(t._suspendTimer),t._suspendTimer=null)):"suspending"===t.state&&(t._resumeAfterSuspend=!0),t):void 0}};var _=new d,h=function(t){var e=this;return t.src&&0!==t.src.length?void e.init(t):void console.error("An array of source files must be passed with any new Howl.")};h.prototype={init:function(t){var e=this;return e._autoplay=t.autoplay||!1,e._format="string"!=typeof t.format?t.format:[t.format],e._html5=t.html5||!1,e._muted=t.mute||!1,e._loop=t.loop||!1,e._pool=t.pool||5,e._preload="boolean"==typeof t.preload?t.preload:!0,e._rate=t.rate||1,e._sprite=t.sprite||{},e._src="string"!=typeof t.src?t.src:[t.src],e._volume=void 0!==t.volume?t.volume:1,e._duration=0,e._loaded=!1,e._sounds=[],e._endTimers={},e._queue=[],e._onend=t.onend?[{fn:t.onend}]:[],e._onfade=t.onfade?[{fn:t.onfade}]:[],e._onload=t.onload?[{fn:t.onload}]:[],e._onloaderror=t.onloaderror?[{fn:t.onloaderror}]:[],e._onpause=t.onpause?[{fn:t.onpause}]:[],e._onplay=t.onplay?[{fn:t.onplay}]:[],e._onstop=t.onstop?[{fn:t.onstop}]:[],e._onmute=t.onmute?[{fn:t.onmute}]:[],e._onvolume=t.onvolume?[{fn:t.onvolume}]:[],e._onrate=t.onrate?[{fn:t.onrate}]:[],e._onseek=t.onseek?[{fn:t.onseek}]:[],e._webAudio=a&&!e._html5,"undefined"!=typeof u&&u&&_.mobileAutoEnable&&_._enableMobileAudio(),_._howls.push(e),e._preload&&e.load(),e},load:function(){var t=this,e=null;if(c)return void t._emit("loaderror",null,"No audio support.");"string"==typeof t._src&&(t._src=[t._src]);for(var n=0;n<t._src.length;n++){var r,i;if(t._format&&t._format[n]?r=t._format[n]:(i=t._src[n],r=/^data:audio\/([^;,]+);/i.exec(i),r||(r=/\.([^.]+)$/.exec(i.split("?",1)[0])),r&&(r=r[1].toLowerCase())),_.codecs(r)){e=t._src[n];break}}return e?(t._src=e,"https:"===window.location.protocol&&"http:"===e.slice(0,5)&&(t._html5=!0,t._webAudio=!1),new p(t),t._webAudio&&v(t),t):void t._emit("loaderror",null,"No codec support for selected audio sources.")},play:function(t){var e=this,n=arguments,r=null;if("number"==typeof t)r=t,t=null;else if("undefined"==typeof t){t="__default";for(var i=0,o=0;o<e._sounds.length;o++)e._sounds[o]._paused&&!e._sounds[o]._ended&&(i++,r=e._sounds[o]._id);1===i?t=null:r=null}var s=r?e._soundById(r):e._inactiveSound();if(!s)return null;if(r&&!t&&(t=s._sprite||"__default"),!e._loaded&&!e._sprite[t])return e._queue.push({event:"play",action:function(){e.play(e._soundById(s._id)?s._id:void 0)}}),s._id;if(r&&!s._paused)return s._id;e._webAudio&&_._autoResume();var a=s._seek>0?s._seek:e._sprite[t][0]/1e3,c=(e._sprite[t][0]+e._sprite[t][1])/1e3-a,l=1e3*c/Math.abs(s._rate);l!==1/0&&(e._endTimers[s._id]=setTimeout(e._ended.bind(e,s),l)),s._paused=!1,s._ended=!1,s._sprite=t,s._seek=a,s._start=e._sprite[t][0]/1e3,s._stop=(e._sprite[t][0]+e._sprite[t][1])/1e3,s._loop=!(!s._loop&&!e._sprite[t][2]);var d=s._node;if(e._webAudio){var h=function(){e._refreshBuffer(s);var t=s._muted||e._muted?0:s._volume*_.volume();d.gain.setValueAtTime(t,u.currentTime),s._playStart=u.currentTime,"undefined"==typeof d.bufferSource.start?s._loop?d.bufferSource.noteGrainOn(0,a,86400):d.bufferSource.noteGrainOn(0,a,c):s._loop?d.bufferSource.start(0,a,86400):d.bufferSource.start(0,a,c),e._endTimers[s._id]||l===1/0||(e._endTimers[s._id]=setTimeout(e._ended.bind(e,s),l)),n[1]||setTimeout(function(){e._emit("play",s._id)},0)};e._loaded?h():(e.once("load",h,s._id),e._clearTimer(s._id))}else{var p=function(){d.currentTime=a,d.muted=s._muted||e._muted||_._muted||d.muted,d.volume=s._volume*_.volume(),d.playbackRate=s._rate,setTimeout(function(){d.play(),n[1]||e._emit("play",s._id)},0)};if(4===d.readyState||!d.readyState&&navigator.isCocoonJS)p();else{var m=function(){l!==1/0&&(e._endTimers[s._id]=setTimeout(e._ended.bind(e,s),l)),p(),d.removeEventListener(f,m,!1)};d.addEventListener(f,m,!1),e._clearTimer(s._id)}}return s._id},pause:function(t){var e=this;if(!e._loaded)return e._queue.push({event:"pause",action:function(){e.pause(t)}}),e;for(var n=e._getSoundIds(t),r=0;r<n.length;r++){e._clearTimer(n[r]);var i=e._soundById(n[r]);if(i&&!i._paused){if(i._seek=e.seek(n[r]),i._paused=!0,e._stopFade(n[r]),i._node)if(e._webAudio){if(!i._node.bufferSource)return e;"undefined"==typeof i._node.bufferSource.stop?i._node.bufferSource.noteOff(0):i._node.bufferSource.stop(0),i._node.bufferSource=null}else isNaN(i._node.duration)&&i._node.duration!==1/0||i._node.pause();arguments[1]||e._emit("pause",i._id)}}return e},stop:function(t){var e=this;if(!e._loaded)return"undefined"!=typeof e._sounds[0]._sprite&&e._queue.push({event:"stop",action:function(){e.stop(t)}}),e;for(var n=e._getSoundIds(t),r=0;r<n.length;r++){e._clearTimer(n[r]);var i=e._soundById(n[r]);if(i&&!i._paused){if(i._seek=i._start||0,i._paused=!0,i._ended=!0,e._stopFade(n[r]),i._node)if(e._webAudio){if(!i._node.bufferSource)return e;"undefined"==typeof i._node.bufferSource.stop?i._node.bufferSource.noteOff(0):i._node.bufferSource.stop(0),i._node.bufferSource=null}else isNaN(i._node.duration)&&i._node.duration!==1/0||(i._node.pause(),i._node.currentTime=i._start||0);e._emit("stop",i._id)}}return e},mute:function(t,e){var n=this;if(!n._loaded)return n._queue.push({event:"mute",action:function(){n.mute(t,e)}}),n;if("undefined"==typeof e){if("boolean"!=typeof t)return n._muted;n._muted=t}for(var r=n._getSoundIds(e),i=0;i<r.length;i++){var o=n._soundById(r[i]);o&&(o._muted=t,n._webAudio&&o._node?o._node.gain.setValueAtTime(t?0:o._volume*_.volume(),u.currentTime):o._node&&(o._node.muted=_._muted?!0:t),n._emit("mute",o._id))}return n},volume:function(){var t,e,n=this,r=arguments;if(0===r.length)return n._volume;if(1===r.length){var i=n._getSoundIds(),o=i.indexOf(r[0]);o>=0?e=parseInt(r[0],10):t=parseFloat(r[0])}else r.length>=2&&(t=parseFloat(r[0]),e=parseInt(r[1],10));var s;if(!("undefined"!=typeof t&&t>=0&&1>=t))return s=e?n._soundById(e):n._sounds[0],s?s._volume:0;if(!n._loaded)return n._queue.push({event:"volume",action:function(){n.volume.apply(n,r)}}),n;"undefined"==typeof e&&(n._volume=t),e=n._getSoundIds(e);for(var a=0;a<e.length;a++)s=n._soundById(e[a]),s&&(s._volume=t,r[2]||n._stopFade(e[a]),n._webAudio&&s._node&&!s._muted?s._node.gain.setValueAtTime(t*_.volume(),u.currentTime):s._node&&!s._muted&&(s._node.volume=t*_.volume()),n._emit("volume",s._id));return n},fade:function(t,e,n,r){var i=this;if(!i._loaded)return i._queue.push({event:"fade",action:function(){i.fade(t,e,n,r)}}),i;i.volume(t,r);for(var o=i._getSoundIds(r),s=0;s<o.length;s++){var a=i._soundById(o[s]);if(a)if(r||i._stopFade(o[s]),i._webAudio&&!a._muted){var c=u.currentTime,l=c+n/1e3;a._volume=t,a._node.gain.setValueAtTime(t,c),a._node.gain.linearRampToValueAtTime(e,l),a._timeout=setTimeout(function(t,n){delete n._timeout,setTimeout(function(){n._volume=e,i._emit("fade",t)},l-u.currentTime>0?Math.ceil(1e3*(l-u.currentTime)):0)}.bind(i,o[s],a),n)}else{var f=Math.abs(t-e),d=t>e?"out":"in",_=f/.01,h=n/_;!function(){var n=t;a._interval=setInterval(function(t,r){n+="in"===d?.01:-.01,n=Math.max(0,n),n=Math.min(1,n),n=Math.round(100*n)/100,i.volume(n,t,!0),n===e&&(clearInterval(r._interval),delete r._interval,i._emit("fade",t))}.bind(i,o[s],a),h)}()}}return i},_stopFade:function(t){var e=this,n=e._soundById(t);return n._interval?(clearInterval(n._interval),delete n._interval,e._emit("fade",t)):n._timeout&&(clearTimeout(n._timeout),delete n._timeout,n._node.gain.cancelScheduledValues(u.currentTime),e._emit("fade",t)),e},loop:function(){var t,e,n,r=this,i=arguments;if(0===i.length)return r._loop;if(1===i.length){if("boolean"!=typeof i[0])return n=r._soundById(parseInt(i[0],10)),n?n._loop:!1;t=i[0],r._loop=t}else 2===i.length&&(t=i[0],e=parseInt(i[1],10));for(var o=r._getSoundIds(e),s=0;s<o.length;s++)n=r._soundById(o[s]),n&&(n._loop=t,r._webAudio&&n._node&&n._node.bufferSource&&(n._node.bufferSource.loop=t));return r},rate:function(){var t,e,n=this,r=arguments;if(0===r.length)e=n._sounds[0]._id;else if(1===r.length){var i=n._getSoundIds(),o=i.indexOf(r[0]);o>=0?e=parseInt(r[0],10):t=parseFloat(r[0])}else 2===r.length&&(t=parseFloat(r[0]),e=parseInt(r[1],10));var s;if("number"!=typeof t)return s=n._soundById(e),s?s._rate:n._rate;if(!n._loaded)return n._queue.push({event:"rate",action:function(){n.rate.apply(n,r)}}),n;"undefined"==typeof e&&(n._rate=t),e=n._getSoundIds(e);for(var u=0;u<e.length;u++)if(s=n._soundById(e[u])){s._rate=t,n._webAudio&&s._node&&s._node.bufferSource?s._node.bufferSource.playbackRate.value=t:s._node&&(s._node.playbackRate=t);var a=n.seek(e[u]),c=(n._sprite[s._sprite][0]+n._sprite[s._sprite][1])/1e3-a,l=1e3*c/Math.abs(s._rate);n._clearTimer(e[u]),n._endTimers[e[u]]=setTimeout(n._ended.bind(n,s),l),n._emit("rate",s._id)}return n},seek:function(){var t,e,n=this,r=arguments;if(0===r.length)e=n._sounds[0]._id;else if(1===r.length){var i=n._getSoundIds(),o=i.indexOf(r[0]);o>=0?e=parseInt(r[0],10):(e=n._sounds[0]._id,t=parseFloat(r[0]))}else 2===r.length&&(t=parseFloat(r[0]),e=parseInt(r[1],10));if("undefined"==typeof e)return n;if(!n._loaded)return n._queue.push({event:"seek",action:function(){n.seek.apply(n,r)}}),n;var s=n._soundById(e);if(s){if(!(t>=0))return n._webAudio?s._seek+(n.playing(e)?u.currentTime-s._playStart:0):s._node.currentTime;var a=n.playing(e);a&&n.pause(e,!0),s._seek=t,n._clearTimer(e),a&&n.play(e,!0),n._emit("seek",e)}return n},playing:function(t){var e=this,n=e._soundById(t)||e._sounds[0];return n?!n._paused:!1},duration:function(){return this._duration},unload:function(){for(var t=this,e=t._sounds,n=0;n<e.length;n++){e[n]._paused||(t.stop(e[n]._id),t._emit("end",e[n]._id)),t._webAudio||(e[n]._node.src="",e[n]._node.removeEventListener("error",e[n]._errorFn,!1),e[n]._node.removeEventListener(f,e[n]._loadFn,!1)),delete e[n]._node,t._clearTimer(e[n]._id);var r=_._howls.indexOf(t);r>=0&&_._howls.splice(r,1)}return m&&delete m[t._src],t._sounds=[],t=null,null},on:function(t,e,n,r){var i=this,o=i["_on"+t];return"function"==typeof e&&o.push(r?{id:n,fn:e,once:r}:{id:n,fn:e}),i},off:function(t,e,n){var r=this,i=r["_on"+t];if(e){for(var o=0;o<i.length;o++)if(e===i[o].fn&&n===i[o].id){i.splice(o,1);break}}else if(t)r["_on"+t]=[];else for(var s=Object.keys(r),o=0;o<s.length;o++)0===s[o].indexOf("_on")&&Array.isArray(r[s[o]])&&(r[s[o]]=[]);return r},once:function(t,e,n){var r=this;return r.on(t,e,n,1),r},_emit:function(t,e,n){for(var r=this,i=r["_on"+t],o=i.length-1;o>=0;o--)i[o].id&&i[o].id!==e&&"load"!==t||(setTimeout(function(t){t.call(this,e,n)}.bind(r,i[o].fn),0),i[o].once&&r.off(t,i[o].fn,i[o].id));return r},_loadQueue:function(){var t=this;if(t._queue.length>0){var e=t._queue[0];t.once(e.event,function(){t._queue.shift(),t._loadQueue()}),e.action()}return t},_ended:function(t){var e=this,n=t._sprite,r=!(!t._loop&&!e._sprite[n][2]);if(e._emit("end",t._id),!e._webAudio&&r&&e.stop(t._id).play(t._id),e._webAudio&&r){e._emit("play",t._id),t._seek=t._start||0,t._playStart=u.currentTime;var i=1e3*(t._stop-t._start)/Math.abs(t._rate);e._endTimers[t._id]=setTimeout(e._ended.bind(e,t),i)}return e._webAudio&&!r&&(t._paused=!0,t._ended=!0,t._seek=t._start||0,e._clearTimer(t._id),t._node.bufferSource=null,_._autoSuspend()),e._webAudio||r||e.stop(t._id),e},_clearTimer:function(t){var e=this;return e._endTimers[t]&&(clearTimeout(e._endTimers[t]),delete e._endTimers[t]),e},_soundById:function(t){for(var e=this,n=0;n<e._sounds.length;n++)if(t===e._sounds[n]._id)return e._sounds[n];return null},_inactiveSound:function(){var t=this;t._drain();for(var e=0;e<t._sounds.length;e++)if(t._sounds[e]._ended)return t._sounds[e].reset();return new p(t)},_drain:function(){var t=this,e=t._pool,n=0,r=0;if(!(t._sounds.length<e)){for(r=0;r<t._sounds.length;r++)t._sounds[r]._ended&&n++;for(r=t._sounds.length-1;r>=0;r--){if(e>=n)return;t._sounds[r]._ended&&(t._webAudio&&t._sounds[r]._node&&t._sounds[r]._node.disconnect(0),t._sounds.splice(r,1),n--)}}},_getSoundIds:function(t){var e=this;if("undefined"==typeof t){for(var n=[],r=0;r<e._sounds.length;r++)n.push(e._sounds[r]._id);return n}return[t]},_refreshBuffer:function(t){var e=this;return t._node.bufferSource=u.createBufferSource(),t._node.bufferSource.buffer=m[e._src],t._node.bufferSource.connect(t._panner?t._panner:t._node),t._node.bufferSource.loop=t._loop,t._loop&&(t._node.bufferSource.loopStart=t._start||0,t._node.bufferSource.loopEnd=t._stop),t._node.bufferSource.playbackRate.value=e._rate,e}};var p=function(t){this._parent=t,this.init()};if(p.prototype={init:function(){var t=this,e=t._parent;return t._muted=e._muted,t._loop=e._loop,t._volume=e._volume,t._muted=e._muted,t._rate=e._rate,t._seek=0,t._paused=!0,t._ended=!0,t._sprite="__default",t._id=Math.round(Date.now()*Math.random()),e._sounds.push(t),t.create(),t},create:function(){var t=this,e=t._parent,n=_._muted||t._muted||t._parent._muted?0:t._volume*_.volume();return e._webAudio?(t._node="undefined"==typeof u.createGain?u.createGainNode():u.createGain(),t._node.gain.setValueAtTime(n,u.currentTime),t._node.paused=!0,t._node.connect(l)):(t._node=new Audio,t._errorFn=t._errorListener.bind(t),t._node.addEventListener("error",t._errorFn,!1),t._loadFn=t._loadListener.bind(t),t._node.addEventListener(f,t._loadFn,!1),t._node.src=e._src,t._node.preload="auto",t._node.volume=n,t._node.load()),t},reset:function(){var t=this,e=t._parent;return t._muted=e._muted,t._loop=e._loop,t._volume=e._volume,t._muted=e._muted,t._rate=e._rate,t._seek=0,t._paused=!0,t._ended=!0,t._sprite="__default",t._id=Math.round(Date.now()*Math.random()),t},_errorListener:function(){var t=this;t._node.error&&4===t._node.error.code&&(_.noAudio=!0),t._parent._emit("loaderror",t._id,t._node.error?t._node.error.code:0),t._node.removeEventListener("error",t._errorListener,!1)},_loadListener:function(){var t=this,e=t._parent;e._duration=Math.ceil(10*t._node.duration)/10,0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),e._loaded||(e._loaded=!0,e._emit("load"),e._loadQueue()),e._autoplay&&e.play(),t._node.removeEventListener(f,t._loadFn,!1)}},a)var m={},v=function(t){var e=t._src;if(m[e])return t._duration=m[e].duration,void b(t);if(/^data:[^;]+;base64,/.test(e)){window.atob=window.atob||function(t){for(var e,n,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",i=String(t).replace(/=+$/,""),o=0,s=0,u="";n=i.charAt(s++);~n&&(e=o%4?64*e+n:n,o++%4)?u+=String.fromCharCode(255&e>>(-2*o&6)):0)n=r.indexOf(n);return u};for(var n=atob(e.split(",")[1]),r=new Uint8Array(n.length),i=0;i<n.length;++i)r[i]=n.charCodeAt(i);g(r.buffer,t)}else{var o=new XMLHttpRequest;o.open("GET",e,!0),o.responseType="arraybuffer",o.onload=function(){g(o.response,t)},o.onerror=function(){t._webAudio&&(t._html5=!0,t._webAudio=!1,t._sounds=[],delete m[e],t.load())},y(o)}},y=function(t){try{t.send()}catch(e){t.onerror()}},g=function(t,e){u.decodeAudioData(t,function(t){t&&e._sounds.length>0&&(m[e._src]=t,b(e,t))},function(){e._emit("loaderror",null,"Decoding audio data failed.")})},b=function(t,e){e&&!t._duration&&(t._duration=e.duration),0===Object.keys(t._sprite).length&&(t._sprite={__default:[0,1e3*t._duration]}),t._loaded||(t._loaded=!0,t._emit("load"),t._loadQueue()),t._autoplay&&t.play()};n(13)&&(r=[],i=function(){return{Howler:_,Howl:h}}.apply(e,r),!(void 0!==i&&(t.exports=i))),"undefined"!=typeof e&&(e.Howler=_,e.Howl=h),"undefined"!=typeof window?(window.HowlerGlobal=d,window.Howler=_,window.Howl=h,window.Sound=p):"undefined"!=typeof o&&(o.HowlerGlobal=d,o.Howler=_,o.Howl=h,o.Sound=p)}(),/*! Effects Plugin */
!function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype._velocity=[0,0,0],HowlerGlobal.prototype._listenerAttr={dopplerFactor:1,speedOfSound:343.3},HowlerGlobal.prototype.pos=function(t,e,n){var r=this;return r.ctx&&r.ctx.listener?(e="number"!=typeof e?r._pos[1]:e,n="number"!=typeof n?r._pos[2]:n,"number"!=typeof t?r._pos:(r._pos=[t,e,n],r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(t,e,n,r,i,o){var s=this;if(!s.ctx||!s.ctx.listener)return s;var u=s._orientation;return e="number"!=typeof e?u[1]:e,n="number"!=typeof n?u[2]:n,r="number"!=typeof r?u[3]:r,i="number"!=typeof i?u[4]:i,o="number"!=typeof o?u[5]:o,"number"!=typeof t?u:(s._orientation=[t,e,n,r,i,o],s.ctx.listener.setOrientation(t,e,n,r,i,o),s)},HowlerGlobal.prototype.velocity=function(t,e,n){var r=this;return r.ctx&&r.ctx.listener?(e="number"!=typeof e?r._velocity[1]:e,n="number"!=typeof n?r._velocity[2]:n,"number"!=typeof t?r._velocity:(r._velocity=[t,e,n],r.ctx.listener.setVelocity(r._velocity[0],r._velocity[1],r._velocity[2]),r)):r},HowlerGlobal.prototype.listenerAttr=function(t){var e=this;if(!e.ctx||!e.ctx.listener)return e;var n=e._listenerAttr;return t?(e._listenerAttr={dopplerFactor:"undefined"!=typeof t.dopplerFactor?t.dopplerFactor:n.dopplerFactor,speedOfSound:"undefined"!=typeof t.speedOfSound?t.speedOfSound:n.speedOfSound},e.ctx.listener.dopplerFactor=n.dopplerFactor,e.ctx.listener.speedOfSound=n.speedOfSound,e):n},Howl.prototype.init=function(t){return function(e){var n=this;return n._orientation=e.orientation||[1,0,0],n._pos=e.pos||null,n._velocity=e.velocity||[0,0,0],n._pannerAttr={coneInnerAngle:"undefined"!=typeof e.coneInnerAngle?e.coneInnerAngle:360,coneOuterAngle:"undefined"!=typeof e.coneOuterAngle?e.coneOuterAngle:360,coneOuterGain:"undefined"!=typeof e.coneOuterGain?e.coneOuterGain:0,distanceModel:"undefined"!=typeof e.distanceModel?e.distanceModel:"inverse",maxDistance:"undefined"!=typeof e.maxDistance?e.maxDistance:1e4,panningModel:"undefined"!=typeof e.panningModel?e.panningModel:"HRTF",refDistance:"undefined"!=typeof e.refDistance?e.refDistance:1,rolloffFactor:"undefined"!=typeof e.rolloffFactor?e.rolloffFactor:1},t.call(this,e)}}(Howl.prototype.init),Howl.prototype.pos=function(e,n,r,i){var o=this;if(!o._webAudio)return o;if(!o._loaded)return o.once("play",function(){o.pos(e,n,r,i)}),o;if(n="number"!=typeof n?0:n,r="number"!=typeof r?-.5:r,"undefined"==typeof i){if("number"!=typeof e)return o._pos;o._pos=[e,n,r]}for(var s=o._getSoundIds(i),u=0;u<s.length;u++){var a=o._soundById(s[u]);if(a){if("number"!=typeof e)return a._pos;a._pos=[e,n,r],a._node&&(a._panner||t(a),a._panner.setPosition(e,n,r))}}return o},Howl.prototype.orientation=function(e,n,r,i){var o=this;if(!o._webAudio)return o;if(!o._loaded)return o.once("play",function(){o.orientation(e,n,r,i)}),o;if(n="number"!=typeof n?o._orientation[1]:n,r="number"!=typeof r?o._orientation[2]:r,"undefined"==typeof i){if("number"!=typeof e)return o._orientation;o._orientation=[e,n,r]}for(var s=o._getSoundIds(i),u=0;u<s.length;u++){var a=o._soundById(s[u]);if(a){if("number"!=typeof e)return a._orientation;a._orientation=[e,n,r],a._node&&(a._panner||t(a),a._panner.setOrientation(e,n,r))}}return o},Howl.prototype.velocity=function(e,n,r,i){var o=this;if(!o._webAudio)return o;if(!o._loaded)return o.once("play",function(){o.velocity(e,n,r,i)}),o;if(n="number"!=typeof n?o._velocity[1]:n,r="number"!=typeof r?o._velocity[2]:r,"undefined"==typeof i){if("number"!=typeof e)return o._velocity;o._velocity=[e,n,r]}for(var s=o._getSoundIds(i),u=0;u<s.length;u++){var a=o._soundById(s[u]);if(a){if("number"!=typeof e)return a._velocity;a._velocity=[e,n,r],a._node&&(a._panner||t(a),a._panner.setVelocity(e,n,r))}}return o},Howl.prototype.pannerAttr=function(){var e,n,r,i=this,o=arguments;if(!i._webAudio)return i;if(0===o.length)return i._pannerAttr;if(1===o.length){if("object"!=typeof o[0])return r=i._soundById(parseInt(o[0],10)),r?r._pannerAttr:i._pannerAttr;e=o[0],"undefined"==typeof n&&(i._pannerAttr={coneInnerAngle:"undefined"!=typeof e.coneInnerAngle?e.coneInnerAngle:i._coneInnerAngle,coneOuterAngle:"undefined"!=typeof e.coneOuterAngle?e.coneOuterAngle:i._coneOuterAngle,coneOuterGain:"undefined"!=typeof e.coneOuterGain?e.coneOuterGain:i._coneOuterGain,distanceModel:"undefined"!=typeof e.distanceModel?e.distanceModel:i._distanceModel,maxDistance:"undefined"!=typeof e.maxDistance?e.maxDistance:i._maxDistance,panningModel:"undefined"!=typeof e.panningModel?e.panningModel:i._panningModel,refDistance:"undefined"!=typeof e.refDistance?e.refDistance:i._refDistance,rolloffFactor:"undefined"!=typeof e.rolloffFactor?e.rolloffFactor:i._rolloffFactor})}else 2===o.length&&(e=o[0],n=parseInt(o[1],10));for(var s=i._getSoundIds(n),u=0;u<s.length;u++)if(r=i._soundById(s[u])){var a=r._pannerAttr;a={coneInnerAngle:"undefined"!=typeof e.coneInnerAngle?e.coneInnerAngle:a.coneInnerAngle,coneOuterAngle:"undefined"!=typeof e.coneOuterAngle?e.coneOuterAngle:a.coneOuterAngle,coneOuterGain:"undefined"!=typeof e.coneOuterGain?e.coneOuterGain:a.coneOuterGain,distanceModel:"undefined"!=typeof e.distanceModel?e.distanceModel:a.distanceModel,maxDistance:"undefined"!=typeof e.maxDistance?e.maxDistance:a.maxDistance,panningModel:"undefined"!=typeof e.panningModel?e.panningModel:a.panningModel,refDistance:"undefined"!=typeof e.refDistance?e.refDistance:a.refDistance,rolloffFactor:"undefined"!=typeof e.rolloffFactor?e.rolloffFactor:a.rolloffFactor};var c=r._panner;c?(c.coneInnerAngle=a.coneInnerAngle,c.coneOuterAngle=a.coneOuterAngle,c.coneOuterGain=a.coneOuterGain,c.distanceModel=a.distanceModel,c.maxDistance=a.maxDistance,c.panningModel=a.panningModel,c.refDistance=a.refDistance,c.rolloffFactor=a.rolloffFactor):(r._pos||(r._pos=i._pos||[0,0,-.5]),t(r))}return i},Sound.prototype.init=function(t){return function(){var e=this,n=e._parent;e._orientation=n._orientation,e._pos=n._pos,e._velocity=n._velocity,e._pannerAttr=n._pannerAttr,t.call(this),e._pos&&n.pos(e._pos[0],e._pos[1],e._pos[2],e._id)}}(Sound.prototype.init),Sound.prototype.reset=function(t){return function(){var e=this,n=e._parent;return e._orientation=n._orientation,e._pos=n._pos,e._velocity=n._velocity,e._pannerAttr=n._pannerAttr,t.call(this)}}(Sound.prototype.reset);var t=function(t){t._panner=Howler.ctx.createPanner(),t._panner.coneInnerAngle=t._pannerAttr.coneInnerAngle,t._panner.coneOuterAngle=t._pannerAttr.coneOuterAngle,t._panner.coneOuterGain=t._pannerAttr.coneOuterGain,t._panner.distanceModel=t._pannerAttr.distanceModel,t._panner.maxDistance=t._pannerAttr.maxDistance,t._panner.panningModel=t._pannerAttr.panningModel,t._panner.refDistance=t._pannerAttr.refDistance,t._panner.rolloffFactor=t._pannerAttr.rolloffFactor,t._panner.setPosition(t._pos[0],t._pos[1],t._pos[2]),t._panner.setOrientation(t._orientation[0],t._orientation[1],t._orientation[2]),t._panner.setVelocity(t._velocity[0],t._velocity[1],t._velocity[2]),t._panner.connect(t._node),t._paused||t._parent.pause(t._id).play(t._id)}}()}).call(e,function(){return this}())},function(t,e){(function(e){t.exports=e}).call(e,{})},function(t,e){"use strict";function n(){window.requestAnimationFrame(function(){var t=i.currentTime/i.duration,e=(100*t).toFixed(2);o.css({width:e+"vw"}),r&&setTimeout(function(){n()},41)})}var r,i,o=$("#video-progress .progress");o.hide(),t.exports.start=function(t){i=t[0],o.show(),r=!0,n()},t.exports.stop=function(){r=!1,$("#video-progress .progress").hide()}},function(t,e){"use strict"},function(t,e){"use strict";t.exports='\n<style>\n  #video-progress {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    width: 100vw;\n    height: 1vh;\n    background: black;\n    z-index: 5;\n  }\n  #video-progress .progress {\n    background: rgba(255,0,0,1);\n    width: 1vw;\n    height: 1vh;\n    /*transition: all 0.1s ease;*/\n  }\n\n  .center-marker {\n    position: fixed;\n    width: 0.5vw;\n    height: 0.5vw;\n    background: rgba(255,255,255,0.8);\n    z-index: 6;\n    right: 1vw;\n    border-radius: 3vw;\n  }\n\n\n  #experience-progress {\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 1vmin;\n    height: 100vh;\n    background: black;\n    z-index: 5;\n  }\n  #experience-progress .progress {\n    background: rgb(255, 255, 255);\n    opacity: 0.7;\n    width: 0.2vw;\n    height: 100vh;\n    margin-top: -100vh;\n    right: 1.15vw;\n    transition: transform 0.3s ease;\n    position: absolute;\n    border-radius: 5vw;\n  }\n\n  ::-webkit-scrollbar {\n      display: none;\n  }\n\n  .control-play {\n    position: fixed;\n    top: 3vmin;\n    right: 3vmin;\n    color: white;\n    z-index: 1;\n  }\n\n  .focus-toggles i {\n    display: block;\n    line-height: 5vmin;\n  }\n  #togglePlay {\n    font-size: 5vmin;\n    margin-right: 5vmin;\n  }\n\n  .control-play i {\n    font-size: 8vmin;\n    text-shadow: 0 0.5vmin 1vmin rgba(0,0,0,0.5);\n    line-height: 100%;\n    cursor: pointer;\n  }\n  #unsupported {\n    margin: 0 auto;\n    text-align: center;\n    margin: 50px;\n    display: none;\n  }\n\n  .loading {\n    width: 100vw;\n    height: 100vh;\n    background: black;\n    z-index: 7;\n    position: fixed;\n    text-align: center;\n    padding-top: 30vh;\n  }\n  .loading h3 {\n    font-weight: 400;\n  }\n\n\n  .pace {\n    -webkit-pointer-events: none;\n    pointer-events: none;\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n\n    z-index: 2000;\n    position: fixed;\n    margin: auto;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 5vh;\n    width: 50vw;\n    background: transparent;\n    border: none;\n\n    overflow: hidden;\n  }\n\n  .pace .pace-progress {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -o-box-sizing: border-box;\n    box-sizing: border-box;\n\n    -webkit-transform: translate3d(0, 0, 0);\n    -moz-transform: translate3d(0, 0, 0);\n    -ms-transform: translate3d(0, 0, 0);\n    -o-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n\n    max-width: 200px;\n    position: fixed;\n    z-index: 2000;\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 100%;\n    height: 100%;\n    width: 100%;\n    background: #29d;\n  }\n\n  .pace.pace-inactive {\n    display: none;\n  }\n</style>\n\n<div class="loading">\n  <h3>Experience Loading...</h3>\n</div>\n<div id="video-progress">\n  <div class="progress"></div>\n</div>\n<div id="experience-progress">\n  <div class="progress"></div>\n</div>\n<div class="control-play">\n  <i class="fa fa-play" id="togglePlay"></i>\n  <div class=\'focus-toggles\'>\n    <i class="fa fa-caret-up" id="toggleUp"></i>\n    <i class="fa fa-caret-down" id="toggleDown"></i>\n  </div>\n</div>\n<div class="container">\n  <div class="background"></div>\n  <div class="container-inner"></div>\n</div>\n\n<h3 class="error" style="display:none">Whoops! Right now this demo doesn\'t handle resizing or browsers less than 1000px wide. Reload this page or get on a laptop!</h3>\n<div id="unsupported">\n<span style="text-transform: uppercase">Mobile experience coming soon</span>  <br><br> This interactive experience is currently only for desktops.\n</div>\n'}]);
//# sourceMappingURL=data:application/json;base64,